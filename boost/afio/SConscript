import os, sys, platform

Import("importedenv", "ARMcrosscompiler")
env=importedenv.Clone()
architecture=env['VARIANT'][:env['VARIANT'].find('/')]
debugbuild="Debug" in env['VARIANT']
if env['CC']=='cl':
    if architecture=="x86":
        if   env.GetOption('sse')==1: env['CCFLAGS']+=[ "/arch:SSE" ]
        elif env.GetOption('sse')>=2: env['CCFLAGS']+=[ "/arch:SSE2" ]
        if   env.GetOption('sse')>=3: env['CPPDEFINES']+=[("__SSE3__", 1)]
        if   env.GetOption('sse')>=4: env['CPPDEFINES']+=[("__SSE4__", 1)]
    if architecture=="x86" or architecture=="x64":
        if   env.GetOption('avx')==1: env['CCFLAGS']+=[ "/arch:AVX" ]
else:
    if architecture=="x86":
        env['CCFLAGS']+=["-m32"]
        env['LINKFLAGS']+=["-m32"]
        if env.GetOption('sse'):
            env['CCFLAGS']+=["-mfpmath=sse"]
            if env.GetOption('sse')>1: env['CCFLAGS']+=["-msse%s" % str(env.GetOption('sse'))]
            else: env['CCFLAGS']+=["-msse"]
    if architecture=="x86" or architecture=="x64":
        if env.GetOption('avx'):
            env['CCFLAGS']+=["-mfpmath=avx"]
            if env.GetOption('avx')>1: env['CCFLAGS']+=["-mavx%s" % str(env.GetOption('avx'))]
            else: env['CCFLAGS']+=["-mavx"]
    if architecture=='ARMv7':
        if ARMcrosscompiler:
            env['CC']='arm-linux-gnueabi-gcc'
            env['CXX']='arm-linux-gnueabi-g++'
        env['CCFLAGS']+=['-mfpu=%s' % env.GetOption('fpu')]
        if env.GetOption('thumb'):
	    env['CCFLAGS']+=['-mthumb']

# Am I building a debug or release build?
if debugbuild:
    env['CPPDEFINES']+=["DEBUG", "_DEBUG"]
else:
    env['CPPDEFINES']+=["NDEBUG"]

# Am I building for Windows or POSIX?
if env['CC']=='cl':
    env['CPPDEFINES']+=["WIN32", "_WINDOWS", "UNICODE", "_UNICODE"]
    env['CXXFLAGS']+=["/EHsc"]
    env['CCFLAGS']+=["/GF"]             # Eliminate duplicate strings
    env['CCFLAGS']+=["/Gy"]             # Seperate COMDATs
    env['CCFLAGS']+=["/Zi"]             # Program database debug info
    if env.GetOption('debug')==2:       # Optimised debug build
        env['CCFLAGS']+=["/O1", "/MTd", "/Oy-"]
    elif debugbuild:
        env['CCFLAGS']+=["/Od", "/MTd"]
    else:
        env['CCFLAGS']+=["/O2", "/MT"]
    env['LIBS']+=[]
    env['LINKFLAGS']+=["/DEBUG"]                # Output debug symbols
    env['LINKFLAGS']+=["/LARGEADDRESSAWARE"]    # Works past 2Gb
    env['LINKFLAGS']+=["/DYNAMICBASE"]          # Doesn't mind being randomly placed
    env['LINKFLAGS']+=["/NXCOMPAT"]             # Likes no execute
    env['LINKFLAGS']+=["/OPT:REF"]              # Seems to puke on load on WinXP without
    env['LINKFLAGS']+=["/MANIFEST"]             # Be UAC compatible
    env['LINKFLAGSEXE']=env['LINKFLAGS'][:]

    env['LINKFLAGS']+=["/VERSION:1.00.0"]       # Version

    if not debugbuild:
        env['LINKFLAGS']+=["/OPT:ICF"]  # Eliminate redundants
else:
    env['CPPDEFINES']+=[]
    env['CCFLAGS']+=["-fstrict-aliasing", "-Wstrict-aliasing"]
    env['CCFLAGS']+=["-Wall", "-Wno-unused"]
    if env.GetOption('useclang'):
        env['CCFLAGS']+=["-Wno-mismatched-tags"]
    else:
        env['CCFLAGS']+=["-fargument-noalias"]
    if env.GetOption('debug')==2:       # Optimised debug build
        env['CCFLAGS']+=["-O1", "-g", "-fno-omit-frame-pointer"]
        if architecture=='ARMv7':
            env['CCFLAGS']+=["-mapcs-frame", "-mtpcs-frame", "-mtpcs-leaf-frame"]
    elif debugbuild:
        env['CCFLAGS']+=["-O0", "-g"]
    else:
        env['CCFLAGS']+=["-O2", "-g"]
    env['CXXFLAGS']+=["-std=c++0x"]
    env['LIBS']+=["boost_atomic", "boost_filesystem", "boost_system", "boost_thread", "pthread"]
    env['LINKFLAGS']+=[]
    env['CCFLAGSEXE']=env['CCFLAGS'][:] +["-fPIC"]
    env['LINKFLAGSEXE']=env['LINKFLAGS'][:] +["-pie"]

outputs={}

# Build the afio DLL
sources = env.SConscript(os.path.join("..", "..", "libs", "afio", "src", "SConscript"), 'importedenv')
libobjects = env.SharedObject(sources, CPPDEFINES=env['CPPDEFINES']+["BOOST_AFIO_DLL_EXPORTS"])
outputs['NiallsCPP11Utilitieslib']=env.SConscript(os.path.join("..", "NiallsCPP11Utilities", "SConscript"), 'importedenv')['mylib']
libobjects+=outputs['NiallsCPP11Utilitieslib']
env['RPATH']+=["."]
if env.GetOption("static"):
    mylib = env.StaticLibrary("afio", source = libobjects)
    myliblib = mylib
else:
    mylib = env.SharedLibrary("afio", source = libobjects)
    if env['CC']=='cl': env.AddPostAction(mylib, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
    myliblib = mylib
    if sys.platform=='win32':
        myliblib=mylib[1]
outputs['afiolib']=(myliblib, mylib, sources)

Return("outputs")
