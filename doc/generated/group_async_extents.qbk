[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__async__extents.xml]
[section:async_zero async_zero (single)]
'''<?dbhtml-include href="disqus_identifiers/async_zero.html"?>'''

'''<indexterm><primary>async_zero</primary></indexterm>'''
Returns a callable which when called with a future<> schedules an asynchronous zero and deallocation of physical storage ("hole punching") after a preceding operation. 

[heading Description]
Most extent based filing systems provide an optimised way of zeroing parts of a file by deallocating the storage backing those regions, and marking those regions as unwritten instead of actually writing zero bytes to storage. They appear as zeroes to anything reading those ranges, and have the big advantage of not consuming any actual physical storage. On Windows, extent deallocation writes zeros for ordinary files and only actually deallocates physical storage if the file is sparse or compressed (note that AFIO by default creates sparse files where possible, and converts any file opened for writing to a sparse file). For your information, deallocation on NTFS is on a 64Kb granularity, but the zeros are written at a byte granularity. On Linux, an attempt is made to use FALLOC\u005fFL\u005fPUNCH\u005fHOLE which if it fails then a write of zeros corresponding to the same ranges is made instead. On FreeBSD, long runs of zeros are automatically detected and eliminated on physical storage, and so zeros are simply written. On OS X, there is no formal hole punching API that we are aware of, and so zeros are simply written.

[heading Synopsis]
``detail::async_zero async_zero(std::vector< std::pair< off_t, off_t >> ranges)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::vector< std::pair< off_t, off_t >>] [] [ranges] [A sequence of extents to zero and deallocate]]
]


[heading Returns]
A callable with the specification future<T>(future<>) 

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if deallocation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][extents_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

[section:async_extents async_extents (single)]
'''<?dbhtml-include href="disqus_identifiers/async_extents.html"?>'''

'''<indexterm><primary>async_extents</primary></indexterm>'''
Returns a callable which when called with a future<> schedules an asynchronous extent enumeration after a preceding operation. 

[heading Description]
In a sparsely allocated file, it can be useful to know which extents contain non-zero data. Note that this call is racy (i.e. the extents are enumerated one by one on some platforms, this means they may be out of date with respect to one another) when other threads or processes are concurrently calling zero() or write() - this is a host OS API limitation.

[heading Synopsis]
``detail::async_extents async_extents()``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
]


[heading Returns]
A callable with the specification future<T>(future<>)

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Race Guarantees][raceguarantees 
[raceguarantee FreeBSD, Linux, OS X..Very racy, even individual extent offset and length can race. The following filters are applied
before returning results: (i) Any extent whose end appears before its start is retried (ii) Sequences of contiguous extents are merged
into single extents.]
[raceguarantee Windows..Race free.]
 ]
[heading Complexity]Amortised O(1) to dispatch. Amortised O(M) to complete where M is the average number of extents in each file.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][extents_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

