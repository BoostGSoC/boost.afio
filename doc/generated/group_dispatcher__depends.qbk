[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__dispatcher____depends.xml]
[section:depends depends]
'''<?dbhtml-include href="disqus_identifiers/depends.html"?>'''

'''<indexterm><primary>depends</primary></indexterm>'''
Schedule the return of an op handle after another op handle completes. This is useful when you need to supply one op handle to a function but it must not begin until another op handle has finished. 

[heading Synopsis]
``future dispatcher::depends(future<> precondition, future<> op)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[future<>] [] [precondition] [The op handle which must complete for op to be passed through. ]]
[[future<>] [] [op] [The op handle to return.]]
]


[heading Returns]
The op handle op. 

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filecopy_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

