[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__statfs.xml]
[section:statfs_2_batch statfs (batch)]
'''<?dbhtml-include href="disqus_identifiers/statfs_2_batch.html"?>'''

'''<indexterm><primary>statfs</primary></indexterm>'''
Schedule a batch of asynchronous volume enumerations after preceding operations. 

[heading Description]
Related types: [^`__afio_statfs_t__`]

[heading Synopsis]
``future< statfs_t > dispatcher::statfs(const std::vector< future<>> & ops, const std::vector< fs_metadata_flags > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< future<>> &] [] [ops] [A batch of op handles. ]]
[[const std::vector< fs_metadata_flags > &] [] [reqs] [A batch of metadata requests.]]
]


[heading Returns]
A batch of stl\u005ffuture volume metadatas. 

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Race Guarantees][raceguarantees 
[raceguarantee FreeBSD, OS X..Race free.]
[raceguarantee Linux..The following items are fetched in a single snapshot: bsize, iosize, blocks, bfree, bavail, files, ffree, namemax, fsid,
flags.rdonly, flags.noexec, flags.nosuid.]
[raceguarantee Windows..The following snapshot categories apply: (i) flags, namemax, fstypename (ii) bsize, blocks, bfree, bavail. Everything else
is fetched separately.]
 ]
[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool*M) to complete where M is the average number of entries in each directory.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][statfs_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

[section:async_statfs async_statfs]
'''<?dbhtml-include href="disqus_identifiers/async_statfs.html"?>'''

'''<indexterm><primary>async_statfs</primary></indexterm>'''
Asynchronous volume enumeration after a preceding operation. 

[heading Description]
Related types: [^`__afio_statfs_t__`]

[heading Synopsis]
``future<statfs_t> async_statfs(future<> _precondition, fs_metadata_flags req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[future<>] [] [_precondition] [The precondition to use. ]]
[[fs_metadata_flags] [] [req] [A metadata request.]]
]


[heading Returns]
A [^`future<``statfs_t``>`]

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Race Guarantees][raceguarantees 
[raceguarantee FreeBSD, OS X..Race free.]
[raceguarantee Linux..The following items are fetched in a single snapshot: bsize, iosize, blocks, bfree, bavail, files, ffree, namemax, fsid,
flags.rdonly, flags.noexec, flags.nosuid.]
[raceguarantee Windows..The following snapshot categories apply: (i) flags, namemax, fstypename (ii) bsize, blocks, bfree, bavail. Everything else
is fetched separately.]
 ]
[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete.
[heading Exception Model]Propagates the exception of any input precondition with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Note that error code returning functions may still throw exceptions e.g. failure to allocate memory.
[heading Example][statfs_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

[section:statfs_2_throwing statfs (throwing)]
'''<?dbhtml-include href="disqus_identifiers/statfs_2_throwing.html"?>'''

'''<indexterm><primary>statfs</primary></indexterm>'''
Synchronous volume enumeration after a preceding operation. 

[heading Description]
Related types: [^`__afio_statfs_t__`]

[heading Synopsis]
``statfs_t statfs(future<> _precondition, fs_metadata_flags req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[future<>] [] [_precondition] [The precondition to use. ]]
[[fs_metadata_flags] [] [req] [A metadata request.]]
]


[heading Returns]
The volume metadata requested. 

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Race Guarantees][raceguarantees 
[raceguarantee FreeBSD, OS X..Race free.]
[raceguarantee Linux..The following items are fetched in a single snapshot: bsize, iosize, blocks, bfree, bavail, files, ffree, namemax, fsid,
flags.rdonly, flags.noexec, flags.nosuid.]
[raceguarantee Windows..The following snapshot categories apply: (i) flags, namemax, fstypename (ii) bsize, blocks, bfree, bavail. Everything else
is fetched separately.]
 ]
[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete.
[heading Exception Model]Propagates the exception of any input precondition with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Note that error code returning functions may still throw exceptions e.g. failure to allocate memory.
[heading Example][statfs_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

[section:statfs_3_nonthrowing statfs (nonthrowing)]
'''<?dbhtml-include href="disqus_identifiers/statfs_3_nonthrowing.html"?>'''

'''<indexterm><primary>statfs</primary></indexterm>'''
Synchronous volume enumeration after a preceding operation. 

[heading Description]
Related types: [^`__afio_statfs_t__`]

[heading Synopsis]
``statfs_t statfs(error_code & _ec, future<> _precondition, fs_metadata_flags req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[error_code &] [] [_ec] [Error code to set. ]]
[[future<>] [] [_precondition] [The precondition to use. ]]
[[fs_metadata_flags] [] [req] [A metadata request.]]
]


[heading Returns]
The volume metadata requested. 

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Race Guarantees][raceguarantees 
[raceguarantee FreeBSD, OS X..Race free.]
[raceguarantee Linux..The following items are fetched in a single snapshot: bsize, iosize, blocks, bfree, bavail, files, ffree, namemax, fsid,
flags.rdonly, flags.noexec, flags.nosuid.]
[raceguarantee Windows..The following snapshot categories apply: (i) flags, namemax, fstypename (ii) bsize, blocks, bfree, bavail. Everything else
is fetched separately.]
 ]
[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete.
[heading Exception Model]Propagates the exception of any input precondition with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Note that error code returning functions may still throw exceptions e.g. failure to allocate memory.
[heading Example][statfs_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

