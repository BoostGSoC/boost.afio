[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__close.xml]
[section:close_1_batch close (batch)]
'''<?dbhtml-include href="disqus_identifiers/close_1_batch.html"?>'''

'''<indexterm><primary>close</primary></indexterm>'''
Schedule a batch of asynchronous file or directory handle closes after preceding operations. 

[heading Description]
Note this is ignored for handles where available\u005fto\u005fdirectory\u005fcache() is true as those cannot be explicitly closed. Note that failure to explicitly schedule closing a file handle using this call means it will be [*synchronously] closed on last reference count by [^`__afio_handle__`]. This can consume considerable time, especially if SyncOnClose is enabled.

[heading Synopsis]
``future dispatcher::close(const std::vector< future<>> & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< future<>> &] [] [ops] [A batch of op handles.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if closing handles is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Once a batch of input ops has been verified at the point of entry as not errored, you are guaranteed that the batch is atomically scheduled as a whole, unless a failure to allocate memory occurs.
[heading Example][filedir_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

[section:async_close async_close]
'''<?dbhtml-include href="disqus_identifiers/async_close.html"?>'''

'''<indexterm><primary>async_close</primary></indexterm>'''
Asynchronous file or directory handle close after a preceding operation. 

[heading Description]
Note this is ignored for handles where available\u005fto\u005fdirectory\u005fcache() is true as those cannot be explicitly closed. Note that failure to explicitly schedule closing a file handle using this call means it will be [*synchronously] closed on last reference count by [^`__afio_handle__`]. This can consume considerable time, especially if SyncOnClose is enabled.

[heading Synopsis]
``future async_close(future<> _precondition)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[future<>] [] [_precondition] [The precondition to use.]]
]


[heading Returns]
A future<void>

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if closing handles is constant time.
[heading Exception Model]Propagates the exception of any input precondition with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Note that error code returning functions may still throw exceptions e.g. failure to allocate memory.
[heading Example][filedir_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

[section:close_1_throwing close (throwing)]
'''<?dbhtml-include href="disqus_identifiers/close_1_throwing.html"?>'''

'''<indexterm><primary>close</primary></indexterm>'''
Synchronous file or directory handle close after a preceding operation. 

[heading Description]
Note this is ignored for handles where available\u005fto\u005fdirectory\u005fcache() is true as those cannot be explicitly closed. Note that failure to explicitly schedule closing a file handle using this call means it will be [*synchronously] closed on last reference count by [^`__afio_handle__`]. This can consume considerable time, especially if SyncOnClose is enabled.

[heading Synopsis]
``void close(future<> _precondition)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[future<>] [] [_precondition] [The precondition to use.]]
]


[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if closing handles is constant time.
[heading Exception Model]Propagates the exception of any input precondition with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Note that error code returning functions may still throw exceptions e.g. failure to allocate memory.
[heading Example][filedir_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

[section:close_2_non_throwing close (non throwing)]
'''<?dbhtml-include href="disqus_identifiers/close_2_non_throwing.html"?>'''

'''<indexterm><primary>close</primary></indexterm>'''
Synchronous file or directory handle close after a preceding operation. 

[heading Description]
Note this is ignored for handles where available\u005fto\u005fdirectory\u005fcache() is true as those cannot be explicitly closed. Note that failure to explicitly schedule closing a file handle using this call means it will be [*synchronously] closed on last reference count by [^`__afio_handle__`]. This can consume considerable time, especially if SyncOnClose is enabled.

[heading Synopsis]
``void close(error_code & _ec, future<> _precondition)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[error_code &] [] [_ec] [Error code to set. ]]
[[future<>] [] [_precondition] [The precondition to use.]]
]


[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if closing handles is constant time.
[heading Exception Model]Propagates the exception of any input precondition with an errored state at the point of dispatch, and throws a `std::invalid_argument` if any inputs have values which could not possibly be correct. Note that error code returning functions may still throw exceptions e.g. failure to allocate memory.
[heading Example][filedir_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

