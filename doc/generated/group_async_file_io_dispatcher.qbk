[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__async__file__io__dispatcher.xml]
[section:current_dispatcher current_dispatcher]
'''<?dbhtml-include href="disqus_identifiers/current_dispatcher.html"?>'''

'''<indexterm><primary>current_dispatcher</primary></indexterm>'''
Retrieves the currently set async\u005ffile\u005fio\u005fdispatcher for this thread, optionally setting it to a new dispatcher. 

[heading Synopsis]
``BOOST_AFIO_DECL dispatcher_ptr current_dispatcher(option< dispatcher_ptr > new_dispatcher = empty)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[option< dispatcher_ptr >] [] [new_dispatcher] [The new async_file_io_dispatcher to set. ]]
]


[heading Returns]
The current async\u005ffile\u005fio\u005fdispatcher. 

[heading Header]
`#include <boost/afio/v2/afio.hpp>`


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

[section:make_dispatcher make_dispatcher]
'''<?dbhtml-include href="disqus_identifiers/make_dispatcher.html"?>'''

'''<indexterm><primary>make_dispatcher</primary></indexterm>'''
Instatiates the best available async\u005ffile\u005fio\u005fdispatcher implementation for this system for the given uri. 

[heading Description]
Note that the number of threads in the threadpool supplied is the maximum non-async op queue depth (e.g. file opens, closes etc.). For fast SSDs, there isn't much gain after eight-sixteen threads, so the process threadpool is set to eight by default. For slow hard drives, or worse, SANs, a queue depth of 64 or higher might deliver significant benefits.

URIs currently supported by AFIO:

* [*[^__fileurl__]] The dispatcher will refer to the local filesystem of this machine.



[heading Synopsis]
``BOOST_AFIO_DECL outcome<dispatcher_ptr> make_dispatcher(std::string uri = "file : / / /", file_flags flagsforce = file_flags::none, file_flags flagsmask = file_flags::none,
                                                          std::shared_ptr< thread_source > threadpool = process_threadpool())``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::string] [] [uri] [Where to open the dispatcher upon. ]]
[[file_flags] [] [flagsforce] [The flags to bitwise OR with any opened file flags. Used to force on certain flags. ]]
[[file_flags] [] [flagsmask] [The flags to bitwise AND with any opened file flags. Used to force off certain flags. ]]
[[std::shared_ptr< thread_source >] [] [threadpool] [The threadpool instance to use for asynchronous dispatch.]]
]


[heading Returns]
A shared\u005fptr to the best available async\u005ffile\u005fio\u005fdispatcher implementation for this system for the given uri. 

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[heading Example]
[call_example]


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

[section:depends depends]
'''<?dbhtml-include href="disqus_identifiers/depends.html"?>'''

'''<indexterm><primary>depends</primary></indexterm>'''
Make ready a future after a precondition future readies. 

[heading Synopsis]
``future depends(future<> precondition, future<> out)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[future<>] [] [precondition] [The future which must signal before the returned future signals. ]]
[[future<>] [] [out] [The future to return. ]]
]


[heading Returns]
A future which returns out after precondition signals. 

[heading Header]
`#include <boost/afio/v2/afio.hpp>`


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

