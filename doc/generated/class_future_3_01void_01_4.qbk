[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\classboost_1_1afio_1_1future_3_01void_01_4.xml]
[section:future< void > future< void >]
'''<?dbhtml-include href="disqus_identifiers/future_-void-_.html"?>'''

'''<indexterm><primary>future< void ></primary></indexterm>'''


[heading Synopsis]
``class future< void >
{
  // ...
};
``

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[`` future(future< void > && o, stl_future< void > && result)``

] [] [[* future< void > &&]: ['o]:  

[* stl_future< void > &&]: ['result]:  



][

]
]
[[`` future()``

] [Default constructor. ] [

][

]
]
[[`` future(const future & o)``

] [Copy constructor. ] [[* const future &]: ['o]:  



][

]
]
[[`` future(future && o)``

] [Move constructor. ] [[* future &&]: ['o]:  



][

]
]
[[`` future(async_file_io_dispatcher_base * parent, size_t id, shared_future< std::shared_ptr< async_io_handle >> handle,
        bool check_handle = true, bool validate = true)``

] [] [[* async_file_io_dispatcher_base *]: ['parent]:  The dispatcher this op belongs to. 

[* size_t]: ['id]:  The unique non-zero id of this op. 

[* shared_future< std::shared_ptr< async_io_handle >>]: ['handle]:  A shared_ptr to shared state between all instances of this reference. 

[* bool]: ['check_handle]:  Whether to have validation additionally check if a handle is not null 

[* bool]: ['validate]:  Whether to check the inputs and shared state for valid (and not errored) values 



][

]
]
[[`` future(std::shared_ptr< async_io_handle > _handle, bool check_handle = true, bool validate = true)``

] [] [[* std::shared_ptr< async_io_handle >]: ['_handle]:  A shared_ptr to shared state between all instances of this reference. 

[* bool]: ['check_handle]:  Whether to have validation additionally check if a handle is not null 

[* bool]: ['validate]:  Whether to check the inputs and shared state for valid (and not errored) values 



][

]
]
[[`` future(async_file_io_dispatcher_base * parent, size_t id)``

] [] [[* async_file_io_dispatcher_base *]: ['parent]:  The dispatcher this op belongs to. 

[* size_t]: ['id]:  The unique non-zero id of this op. 



][

]
]
[[``future & operator=(const future & o)``

] [Copy assignment. ] [[* const future &]: ['o]:  



][

]
]
[[``future & operator=(future && o)``

] [Move assignment. ] [[* future &&]: ['o]:  



][

]
]
[[``bool valid()``

] [True if this future is valid. ] [

][

]
]
[[``async_file_io_dispatcher_base * parent()``

] [The parent dispatcher of this future. ] [

][

]
]
[[``size_t id()``

] [] [

][

]
]
[[``std::shared_ptr< async_io_handle > get_handle(bool return_null_if_errored = false)``

] [Retrieves the handle or exception from the shared state, rethrowing any exception. Returns a null shared pointer if this future is invalid. ] [[* bool]: ['return_null_if_errored]:  



][

]
]
[[``const async_io_handle & operator*()``

] [Dereferences the handle from the shared state. Same as *h.get_handle(). ] [

][

]
]
[[``async_io_handle & operator*()``

] [Dereferences the handle from the shared state. Same as *h.get_handle(). ] [

][

]
]
[[``const async_io_handle * operator->()``

] [Dereferences the handle from the shared state. Same as h.get_handle()->get(). ] [

][

]
]
[[``async_io_handle * operator->()``

] [Dereferences the handle from the shared state. Same as h.get_handle()->get(). ] [

][

]
]
[[``void get()``

] [Waits for the future to become ready, rethrowing any exception found. Throws a [^`future_errc::no_state`] if this future is invalid. ] [

][

]
]
[[``error_type get_error()``

] [Waits for the future to become ready, returning any error state found. ] [

][

]
]
[[``exception_type get_exception()``

] [Waits for the future to become ready, returning any error state found. ] [

][

]
]
[[``void wait()``

] [Waits for the future to become ready. Throws a [^`future_errc::no_state`] if this future is invalid. ] [

][

]
]
[[``template<class Rep, class Period>
future_status wait_for(const chrono::duration< Rep, Period > & duration)``

] [Waits for the future to become ready for a period. Throws a [^`future_errc::no_state`] if this future is invalid. ] [[* const chrono::duration< Rep, Period > &]: ['duration]:  



][

]
]
[[``template<class Clock, class Duration>
future_status wait_until(const chrono::time_point< Clock, Duration > & deadline)``

] [Waits for the future to become ready until a deadline. Throws a [^`future_errc::no_state`] if this future is invalid. ] [[* const chrono::time_point< Clock, Duration > &]: ['deadline]:  



][

]
]
[[``bool validate(bool check_handle = true)``

] [Validates contents. ] [[* bool]: ['check_handle]:  



][

]
]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

