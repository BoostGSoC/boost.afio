[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\structboost_1_1afio_1_1enumerate__req.xml]
[section:enumerate_req enumerate_req]
'''<?dbhtml-include href="disqus_identifiers/enumerate_req.html"?>'''
[section:filter filter]
'''<?dbhtml-include href="disqus_identifiers/filter.html"?>'''

'''<indexterm><primary>filter</primary></indexterm>'''
'''<indexterm><primary>none</primary></indexterm>'''
'''<indexterm><primary>fastdeleted</primary></indexterm>'''
How to do deleted file elimination on Windows. 

[heading Synopsis]
``enum filter {none, fastdeleted};``

[heading Values]

[table
[[Value] [Description] ]
[[none] [Do no filtering at all. ]]
[[fastdeleted] [Filter out AFIO deleted files based on their filename (fast and fairly reliable) ]]
]


[heading Header]
`#include <boost/afio/v2/afio.hpp>`


'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]


'''<indexterm><primary>enumerate_req</primary></indexterm>'''
A convenience bundle of precondition, number of items to enumerate, item pattern match and metadata to prefetch. 

[heading Description]
You should note that shell globs must use a restricted form for portability:

Microsoft Windows NT oddly does not specify what wildcards are permitted, but I think the documentation for the kernel function FsRtlIsNameInExpression() is probably sound: * means zero or more characters, ? means any one character. Do not use <, > or " as these have special MS-DOS compatibility inducing consequences. Do not use ^ as this is the Windows wildcard escape character.

POSIX further extends NT's wildcards with \[seq\] which is a subset of characters and \[!seq\] which is not any subset of characters. Here a \ is the wildcard escape character. 

[heading Synopsis]
``struct enumerate_req
{
  future precondition;      // A precondition for this operation. 
  size_t maxitems;          // The maximum number of items to return in this request. Note that setting to one will often invoke two syscalls. 
  bool restart;             // Restarts the enumeration for this open directory handle. 
  path glob;                // An optional shell glob by which to filter the items returned. Done kernel side on Windows, user side on POSIX. 
  metadata_flags metadata;  // The metadata to prefetch for each item enumerated. AFIO may fetch more metadata than requested if it is cost free. 
  filter filtering;         // Any filtering you want AFIO to do for you. 
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``enumerate_req()``

] [Default constructor. ] [

]]
[[``enumerate_req(future<> _precondition, size_t _maxitems = 2, bool _restart = true,
               path _glob = path(), metadata_flags _metadata = metadata_flags::None, filter _filtering = filter::fastdeleted)``

] [Constructs an instance. ] [[* future<>]: ['_precondition]:  The precondition for this operation. 

[* size_t]: ['_maxitems]:  The maximum number of items to return in this request. Note that setting to one will often invoke two syscalls. 

[* bool]: ['_restart]:  Restarts the enumeration for this open directory handle. 

[* path]: ['_glob]:  An optional shell glob by which to filter the items returned. Done kernel side on Windows, user side on POSIX. 

[* metadata_flags]: ['_metadata]:  The metadata to prefetch for each item enumerated. AFIO may fetch more metadata than requested if it is cost free. 

[* filter]: ['_filtering]:  Any filtering you want AFIO to do for you. 



]]
[[``enumerate_req(future<> _precondition, path _glob, size_t _maxitems = 2,
               bool _restart = true, metadata_flags _metadata = metadata_flags::None, filter _filtering = filter::fastdeleted)``

] [Constructs an instance. ] [[* future<>]: ['_precondition]:  The precondition for this operation. 

[* path]: ['_glob]:  A shell glob by which to filter the items returned. Done kernel side on Windows, user side on POSIX. 

[* size_t]: ['_maxitems]:  The maximum number of items to return in this request. Note that setting to one will often invoke two syscalls. 

[* bool]: ['_restart]:  Restarts the enumeration for this open directory handle. 

[* metadata_flags]: ['_metadata]:  The metadata to prefetch for each item enumerated. AFIO may fetch more metadata than requested if it is cost free. 

[* filter]: ['_filtering]:  Any filtering you want AFIO to do for you. 



]]
[[``enumerate_req(future<> _precondition, metadata_flags _metadata, size_t _maxitems = 2,
               bool _restart = true, path _glob = path(), filter _filtering = filter::fastdeleted)``

] [Constructs an instance. ] [[* future<>]: ['_precondition]:  The precondition for this operation. 

[* metadata_flags]: ['_metadata]:  The metadata to prefetch for each item enumerated. AFIO may fetch more metadata than requested if it is cost free. 

[* size_t]: ['_maxitems]:  The maximum number of items to return in this request. Note that setting to one will often invoke two syscalls. 

[* bool]: ['_restart]:  Restarts the enumeration for this open directory handle. 

[* path]: ['_glob]:  An optional shell glob by which to filter the items returned. Done kernel side on Windows, user side on POSIX. 

[* filter]: ['_filtering]:  Any filtering you want AFIO to do for you. 



]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``bool validate()``

] [Validates contents. ] [

][

]
]
]

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

