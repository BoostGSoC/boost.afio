language: cpp
compiler:
  - gcc
  - clang
notifications:
  email:
#    recipients:
#      - one@example.com
#      - other@example.com
    on_success: change # [always|never|change] # default: change
    on_failure: change # [always|never|change] # default: always

env:
  matrix:
    - _="Build test" VALGRIND=0 UNIT_TESTS=0 DEBUG=0 GCCVER="-4.8" GCOV=0
    - _="Unit/functional tests" VALGRIND=0 UNIT_TESTS="" DEBUG=0 GCCVER="-4.8" GCOV=0
    - _="GCC 4.8 + Unit/functional tests coverage" VALGRIND=0 CCFLAGS="-fprofile-arcs -ftest-coverage" UNIT_TESTS="" DEBUG=1 GCCVER="-4.8" GCOV=1
    - _="Memory error and leak tests" VALGRIND=memcheck UNIT_TESTS="--log_level=test_suite --run_test=all/exclude_async_io_errors" DEBUG=2 GCCVER="-4.8" GCOV=0
    - _="Race detection tests" VALGRIND=0 CCFLAGS="-fsanitize=thread" UNIT_TESTS="" DEBUG=2 GCCVER="-4.8" TSAN_OPTIONS="suppressions=libs/afio/test/tsan.supp" GCOV=0

# The clang 3.2 .deb doesn't supply the needed tsan runtime library :(
matrix:
  exclude:
    - compiler: clang
      env: _="GCC 4.8 + Unit/functional tests coverage" VALGRIND=0 CCFLAGS="-fprofile-arcs -ftest-coverage" UNIT_TESTS="" DEBUG=1 GCCVER="-4.8" GCOV=1

    - compiler: clang
      env: _="Race detection tests" VALGRIND=0 CCFLAGS="-fsanitize=thread" UNIT_TESTS="" DEBUG=2 GCCVER="-4.8" TSAN_OPTIONS="suppressions=libs/afio/test/tsan.supp" GCOV=0


  allow_failures:
    - compiler: gcc
      env: _="Race detection tests" VALGRIND=0 CCFLAGS="-fsanitize=thread" UNIT_TESTS="" DEBUG=2 GCCVER="-4.8" TSAN_OPTIONS="suppressions=libs/afio/test/tsan.supp" GCOV=0



before_install:
 - sudo add-apt-repository -y ppa:apokluda/boost1.53
 - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
 - if [ $CXX = "clang++" ]; then sudo add-apt-repository -y ppa:h-rayflood/llvm; fi
 - sudo apt-get update -qq
 - sudo apt-get install -qq libboost1.53-all-dev
 - if [ $CXX = "clang++" ]; then sudo apt-get install -qq libstdc++-4.8-dev clang-3.2; fi
 - if [ $CC = "gcc" ]; then sudo apt-get install -qq g++$GCCVER; fi
 - if [ $VALGRIND != "0" ]; then sudo apt-get install -qq valgrind; fi
 - git submodule update --init --recursive
 - wget https://github.com/ned14/boost-trunk/archive/release/Boost_1_54_0_beta1.tar.gz
 - tar zxf Boost_1_54_0_beta1.tar.gz
 - mv boost-trunk-release-Boost_1_54_0_beta1 boost
 - mv NiallsCPP_jamfile.v2 NiallsCPP11Utilities/jamfile.v2 

#HOME should be defined per the travis-ci docs as /home/travis
 - mv user-config.jam $HOME
 
# install boost build
# - BOOST="/home/travis/build/BoostGSoC/boost.afio/boost/boost-trunk-release-Boost_1_54_0_beta1"
 - cd boost/boost-trunk-release-Boost_1_54_0_beta1/tools/build/v2
 - ./bootstrap.sh
 - sudo ./b2 install
 - cd ../../../../../

#update all packages
 - sudo apt-get update -qq
 - sudo apt-get upgrade -qq

#set GCCVER for clang and TESTPREFIX for all compilers
 - if [ $CC = "clang" ]; then GCCVER=""; TESTPREFIX="libs/afio/test/bin/clang-linux-3.2"; else TESTPREFIX="libs/afio/test/bin/$CC$GCCVER"; fi


script:
# set debug/release & proper path for debug/release builds
 - if [ $DEBUG -eq 0 ]; then PREFIXPATH="$TESTPREFIX/release/threading-multi"; DEBUGBUILD=release; fi
 - if [ $DEBUG -eq 1 ]; then PREFIXPATH="$TESTPREFIX/debug/threading-multi"; DEBUGBUILD=debug; fi
 - if [ $DEBUG -eq 2 ]; then PREFIXPATH="$TESTPREFIX/debug/optimization-speed/threading-multi"; DEBUGBUILD="debug optimization=speed"; fi


#try to pass compiler flags appropriatly
 - if [ $CCFLAGS != "" ]; then FLAGS="cxxflags="$CCFLAGS""; else FLAGS=""; fi

#try to link gcov appropriatly
 - if [ $GCOV = "1" ] then FLAGS="$FLAGS linkflags=-lgcov" ;

#build the lib
 - b2 $DEBUGBUILD toolset=$CC$GCCVER --link=shared --boost=/home/travis/build/BoostGSoC/boost.afio/boost/boost-trunk-release-Boost_1_54_0_beta1 $FLAGS;

#build unit tests
 - b2 libs/afio/test $DEBUGBUILD toolset=$CC$GCCVER --link=shared --boost=/home/travis/build/BoostGSoC/boost.afio/boost/boost-trunk-release-Boost_1_54_0_beta1 $FLAGS;


#valgrind setup
 - if [ $VALGRIND = "memcheck" ]; then PREFIXTEST="valgrind --tool=memcheck --suppressions=libs/afio/test/memcheck.supp --track-origins=yes --track-fds=yes --leak-check=full --show-reachable=yes --error-exitcode=1"; fi
 - if [ $VALGRIND = "drd" ]; then PREFIXTEST="valgrind --tool=drd --suppressions=libs/afio/test/drd.supp --error-exitcode=1"; fi
 - if [ $VALGRIND = "0" ]; then PREFIXTEST=""; fi
 
#runtests
 - if [ $GCOV -eq 1 ]; then set -x; fi
 - if [ "$UNIT_TESTS" != "0" ]; then $PREFIXTEST $PREFIXPATH/boost_afio_test -s $UNIT_TESTS; fi

after_success:
 - if [ $GCOV -eq 1 ]; then bash libs/afio/test/update_coveralls.sh `pwd`; fi
  
