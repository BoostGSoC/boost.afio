language: cpp
compiler:
  - gcc
  - clang
notifications:
  email:
#    recipients:
#      - one@example.com
#      - other@example.com
    on_success: change # [always|never|change] # default: change
    on_failure: change # [always|never|change] # default: always
env:
  - VALGRIND=0 UNIT_TESTS=0 DEBUG=0 GCCVER=""
  - VALGRIND=0 UNIT_TESTS="exclude:async_io/torture* exclude:async_io/errors" DEBUG=0 GCCVER=""
  - VALGRIND=memcheck UNIT_TESTS="exclude:async_io/torture* exclude:async_io/errors" DEBUG=1 GCCVER=""
  - VALGRIND=0 CCFLAGS="--usethreadsanitize --usegcc=g++-4.8" UNIT_TESTS="exclude:async_io/torture* exclude:async_io/errors" DEBUG=1 GCCVER="4.8" TSAN_OPTIONS="suppressions=unittests/tsan.supp"
  - VALGRIND=0 UNIT_TESTS="async_io/torture" DEBUG=0 GCCVER=""

# The clang 3.2 .deb doesn't supply the needed tsan runtime library :(
matrix:
  exclude:
    - compiler: clang
      env: VALGRIND=0 CCFLAGS="--usethreadsanitize --usegcc=g++-4.8" UNIT_TESTS="exclude:async_io/torture* exclude:async_io/errors" DEBUG=1 GCCVER="4.8" TSAN_OPTIONS="suppressions=unittests/tsan.supp"
    - compiler: clang
      env: VALGRIND=0 UNIT_TESTS="async_io/torture" DEBUG=0 GCCVER=""

  allow_failures:
    - compiler: gcc
      env: VALGRIND=0 CCFLAGS="--usethreadsanitize --usegcc=g++-4.8" UNIT_TESTS="exclude:async_io/torture* exclude:async_io/errors" DEBUG=1 GCCVER="4.8" TSAN_OPTIONS="suppressions=unittests/tsan.supp"
    - compiler: gcc
      env: VALGRIND=0 UNIT_TESTS="async_io/torture" DEBUG=0 GCCVER=""

before_install:
 - sudo add-apt-repository -y ppa:apokluda/boost1.53
 - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
 - if [ $CXX = "clang++" ]; then sudo add-apt-repository -y ppa:h-rayflood/llvm; fi
 - sudo apt-get update -qq
 - sudo apt-get install -qq libboost1.53-all-dev
 - if [ $CXX = "clang++" ]; then sudo apt-get install -qq libstdc++-4.8-dev clang-3.2; fi
 - if [ $GCCVER != "" ]; then sudo apt-get install -qq g++-$GCCVER; fi
 - if [ $VALGRIND != "0" ]; then sudo apt-get install -qq valgrind; fi
 - git submodule update --init --recursive

script:
 - if [ $CC = "clang" ]; then if [ $DEBUG -eq 0 ]; then scons -k --useclang=clang++-3.2 $CCFLAGS; else scons -k --useclang=clang++-3.2 --debugbuild $CCFLAGS; fi; else if [ $DEBUG -eq 0 ]; then scons -k $CCFLAGS; else scons -k --debugbuild $CCFLAGS; fi; fi
 - if [ $VALGRIND = "memcheck" ]; then PREFIXTEST="valgrind --tool=memcheck --suppressions=unittests/memcheck.supp --track-origins=yes --track-fds=yes --leak-check=full --show-reachable=yes --error-exitcode=1"; fi
 - if [ $VALGRIND = "drd" ]; then PREFIXTEST="valgrind --tool=drd --suppressions=unittests/drd.supp --error-exitcode=1"; fi
 - if [ $VALGRIND = "0" ]; then PREFIXTEST=""; fi
 - if [ $DEBUG -eq 0 ]; then PREFIXPATH="x64/Release"; fi
 - if [ $DEBUG -eq 1 ]; then PREFIXPATH="x64/Debug"; fi

 - if [ "$UNIT_TESTS" != "0" ]; then $PREFIXTEST $PREFIXPATH/tests $UNIT_TESTS; fi
