#  Boost.AFIO Library test Jamfile
#
#  Copyright (c) 2013 Paul Kirth
#
#  Distributed under the Boost Software License, Version 1.0.
#  (See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt)


import modules ;
.argv = [ modules.peek : ARGV ] ;

#local boost-path = [ modules.peek : BOOST_ROOT ] ; #can probably get rid of this

import os ;
import testing ;

# If we're running in a CI, reduce the length of the unit tests considerably
rule running-in-ci ( properties * )
{
   if "--running-in-ci" in $(.argv) 
   {
      return <define>BOOST_AFIO_RUNNING_IN_CI ;
   }
}

project boost/afio/test
    : requirements
      <threading>multi
#      <library>/boost/afio//boost_afio
      <toolset>gcc:<cxxflags>"-std=c++0x -fvisibility-inlines-hidden -fstrict-aliasing -Wstrict-aliasing -Wno-unused -fargument-noalias -fvisibility=hidden -fopenmp -fasynchronous-unwind-tables"
      <toolset>gcc-mingw:<cxxflags>"-DWIN32 -D_UNICODE -DUNICODE -Wno-missing-braces"
	  <toolset>gcc-mingw:<library>/boost/afio//boost_afio
      <toolset>gcc-mingw:<linkflags>"-lws2_32"
      <toolset>gcc:<linkflags>"-lgomp"
      <toolset>clang:<cxxflags>"-std=c++0x -fvisibility-inlines-hidden -fstrict-aliasing -Wstrict-aliasing -Wno-unused -Wno-mismatched-tags -fvisibility=hidden -fopenmp -fasynchronous-unwind-tables"
      <toolset>msvc:<cxxflags>"/openmp /GF /Gy /bigobj /D_VARIADIC_MAX=8"
      <toolset>msvc:<linkflags>"/LARGEADDRESSAWARE /DYNAMICBASE /NXCOMPAT" # /VERSION:1.00.0"
      <toolset>msvc:<define>WIN32 <toolset>msvc:<define>_WINDOWS  <toolset>msvc:<define>UNICODE <toolset>msvc:<define>_UNICODE
      <target-os>linux:<linkflags>"-lpthread -ldl"
      <target-os>freebsd:<linkflags>"-lpthread"
      <link>shared:<define>BOOST_AFIO_DYN_LINK=1
      <library>../../system/build//boost_system
      <library>../../filesystem/build//boost_filesystem
      <library>../../atomic/build//boost_atomic
      <library>../../thread/build//boost_thread
	  <conditional>@running-in-ci
    ;

#exe boost_afio_test : main.cpp   ../detail/SpookyV2.cpp
#    : <include>../../../boost/afio/detail

#;

# the required cpp file for the unit tests (for some reason gcc wants this availible to all tests)
local reqs = ../../../boost/afio/detail/impl/hashes/spookyhash/SpookyV2.cpp   ;

# look in the commandline args for "--valgrind=" and capture its contents in VALGRIND_ARGS
local VALGRIND_ARGS = [ MATCH --valgrind=(.*) : $(.argv) ] ;


# if we're doing a valgrind build, set up the test launcher
if $(VALGRIND_ARGS)
{
  launcher =  <testing.launcher>valgrind ;
}

#auto generate the test_all.cpp
if [ os.name ] = "NT"
{ 
    local str = "for /f \"delims=\" %i in ('dir /b /a-d /s test_file_glob.bat') do \"%~fi\"" ;
    SHELL $(str) ;
}
else 
{ 
    SHELL  [ SHELL "find -L libs/afio -name test_file_glob.sh" ]  ; 
}

# Let user limit test_files
local test_files = [ MATCH ^--test=(.*)$ : $(.argv) ] ;
local example_files = [ glob examples/*.cpp ] ;
if $(test_files)
{
    test_files_all = $(test_files) ;
}
else
{
    # Don't do any of the fsyncing tests on the CI, as it murders the poor hard drive
    if "--running-in-ci" in $(.argv)
	{
        test_files = [ glob tests/*.cpp : tests/*sync_test.cpp tests/*autoflush_test.cpp ] ;
	}
	else
	{
        test_files = [ glob tests/*.cpp ] ;
	}
    test_files_all = $(test_files) test_all.cpp ;
}

# link tests (just compile and links targets)
if "--link-test"  in $(.argv)  
{  
	# Test that inline linkage works
	link test_inline_linkage_master.cpp test_inline_linkage1.cpp test_inline_linkage2.cpp ;

    for local x in $(test_files_all)
    {
        link $(x) $(reqs) ;
    }
    for local x in $(example_files)
    {
        link $(x) $(reqs) ;
    }
}
else # run actual tests
{
    if [ os.name ] = "NT"
    {
        SHELL "rmdir /S /Q results_tests" ;
        SHELL "mkdir results_tests" ;
    }
    else
    {
        SHELL "rm -rf results_tests" ;
        SHELL "mkdir results_tests" ;
    }
    if "--test-all" in $(.argv)   # run the whole test suite at once
    {
        test-suite afio
          : [ run test_all.cpp  $(reqs) : $(VALGRIND_ARGS) --log_format=XML --log_sink=results_all.xml --log_level=all --report_level=no : : $(launcher) ] 

        ;
    }
    else if "--test-each" in $(.argv) # run just the individual tests
    {
        for local file in $(test_files)
        { run $(file) $(reqs) : $(VALGRIND_ARGS) --log_format=XML --log_sink=results_$(file).xml --log_level=all --report_level=no : : $(launcher) ; }
    }
    else        # otherwise run individual tests and the whole lot at once as a separate test
    {
        for local file in $(test_files_all)
        { run $(file) $(reqs) : $(VALGRIND_ARGS) --log_format=XML --log_sink=results_$(file).xml --log_level=all --report_level=no : : $(launcher) ; }

    }
}
