#  Boost.AFIO Library test Jamfile
#
#  Copyright (c) 2013 Paul Kirth
#
#  Distributed under the Boost Software License, Version 1.0.
#  (See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt)


import modules ;
.argv = [ modules.peek : ARGV ] ;

#local boost-path = [ modules.peek : BOOST_ROOT ] ; #can probably get rid of this

import testing ;


project boost/afio/test
    : requirements
      <threading>multi
      <include>../../../boost/afio/detail
      <library>/boost/afio//boost_afio
      <toolset>gcc:<cxxflags>"-std=c++0x -Wno-unused-local-typedefs" 
      <toolset>clang:<cxxflags>-std=c++0x 
      <toolset>msvc:<cxxflags>"/openmp /EHsc /GF /Gy /Zi /Od /MTd"
      <toolset>msvc:<linkflags>"/DEBUG /LARGEADDRESSAWARE /DYNAMICBASE /NXCOMPAT /OPT:REF /MANIFEST" # /VERSION:1.00.0"
      <toolset>msvc:<define>WIN32 <toolset>msvc:<define>_WINDOWS  <toolset>msvc:<define>UNICODE <toolset>msvc:<define>_UNICODE
      #<linkflags>"-l pthread"      #is this the test's dependency or boost_afio's???? 
    ;


#exe boost_afio_test : main.cpp   ../detail/SpookyV2.cpp
#    : <include>../../../boost/afio/detail

#;

local reqs = ../detail/SpookyV2.cpp   ;

local VALGRIND_ARGS = [ MATCH --valgrind=(.*) : $(.argv) ] ;
ECHO $(VALGRIND_ARGS) ;

#if "--run-all"   in $(.argv)
#{
#  test-suite-afio
#    :  [ run test_all.cpp $(reqs) ]
#    ;
#}
#else

if "--link-test"  in $(.argv)  
{    
   test-suite afio-link
    : [ link async_io_threadpool_test.cpp  $(reqs) ]
      [ link async_io_works_1_prime_test.cpp $(reqs) ]
      [ link async_io_works_1_test.cpp $(reqs) ]
      [ link async_io_works_64_test.cpp $(reqs) ]
      [ link async_io_works_1_sync_test.cpp $(reqs) ]
      [ link async_io_works_64_sync_test.cpp $(reqs) ]
      [ link async_io_works_1_autoflush_test.cpp $(reqs) ]
      [ link async_io_works_64_autoflush_test.cpp $(reqs) ]
      [ link async_io_works_1_direct_test.cpp $(reqs) ]
      [ link async_io_works_64_direct_test.cpp $(reqs) ]
      [ link async_io_works_1_directsync_test.cpp $(reqs) ]
      [ link async_io_works_64_directsync_test.cpp $(reqs) ]
      [ link async_io_barrier_test.cpp $(reqs) ]
      [ link async_io_errors_test.cpp $(reqs) ]
      [ link async_io_torture_test.cpp $(reqs) ]
      [ link async_io_torture_sync_test.cpp $(reqs) ]
      [ link async_io_torture_autoflush_test.cpp $(reqs) ]
      [ link async_io_torture_direct_test.cpp $(reqs) ]
      [ link async_io_torture_direct_sync_test.cpp $(reqs) ]
      [ link async_io_sync_test.cpp $(reqs) ]
      [ link test_all.cpp $(reqs) ]
      
    ;
}
else if $(VALGRIND_ARGS)
{
   
   test-suite afio-valgrind
    : [ run async_io_threadpool_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_1_prime_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_1_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_64_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_1_sync_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_64_sync_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_1_autoflush_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_64_autoflush_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_1_direct_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_64_direct_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_1_directsync_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_works_64_directsync_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_barrier_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_errors_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_torture_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_torture_sync_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_torture_autoflush_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_torture_direct_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_torture_direct_sync_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      [ run async_io_sync_test.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      #[ run test_all.cpp $(reqs) : $(VALGRIND_ARGS) : : <testing.launcher>valgrind ]
      
    ;

}    
else
{    
    test-suite afio
    : [ run async_io_threadpool_test.cpp $(reqs) ]
      [ run async_io_works_1_prime_test.cpp $(reqs) ]
      [ run async_io_works_1_test.cpp $(reqs) ]
      [ run async_io_works_64_test.cpp $(reqs) ]
      [ run async_io_works_1_sync_test.cpp $(reqs) ]
      [ run async_io_works_64_sync_test.cpp $(reqs) ]
      [ run async_io_works_1_autoflush_test.cpp $(reqs) ]
      [ run async_io_works_64_autoflush_test.cpp $(reqs) ]
      [ run async_io_works_1_direct_test.cpp $(reqs) ]
      [ run async_io_works_64_direct_test.cpp $(reqs) ]
      [ run async_io_works_1_directsync_test.cpp $(reqs) ]
      [ run async_io_works_64_directsync_test.cpp $(reqs) ]
      [ run async_io_barrier_test.cpp $(reqs) ]
      [ run async_io_errors_test.cpp $(reqs) ]
      [ run async_io_torture_test.cpp $(reqs) ]
      [ run async_io_torture_sync_test.cpp $(reqs) ]
      [ run async_io_torture_autoflush_test.cpp $(reqs) ]
      [ run async_io_torture_direct_test.cpp $(reqs) ]
      [ run async_io_torture_direct_sync_test.cpp $(reqs) ]
      [ run async_io_sync_test.cpp $(reqs) ]
      #[ run test_all.cpp $(reqs) ]
      
    ;
}
