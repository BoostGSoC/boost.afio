#  Boost.AFIO Library test Jamfile
#
#  Copyright (c) 2013 Paul Kirth
#
#  Distributed under the Boost Software License, Version 1.0.
#  (See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt)


import modules ;
.argv = [ modules.peek : ARGV ] ;

#local boost-path = [ modules.peek : BOOST_ROOT ] ; #can probably get rid of this

import testing ;


project boost/afio/test
    : requirements
      <threading>multi
      <include>../../../boost/afio/detail
      <library>../../afio/build//boost_afio
      <toolset>gcc:<cxxflags>"-std=c++0x -Wno-unused-local-typedefs" 
      <toolset>clang:<cxxflags>-std=c++0x 
      <toolset>msvc:<cxxflags>"/openmp /EHsc /GF /Gy /Zi /Od /MTd"
      <toolset>msvc:<linkflags>"/DEBUG /LARGEADDRESSAWARE /DYNAMICBASE /NXCOMPAT /OPT:REF /MANIFEST" # /VERSION:1.00.0"
      <toolset>msvc:<define>WIN32 <toolset>msvc:<define>_WINDOWS  <toolset>msvc:<define>UNICODE <toolset>msvc:<define>_UNICODE
      #<linkflags>"-l pthread"      #is this the test's dependency or boost_afio's???? 
    ;

#exe boost_afio_test : main.cpp   ../detail/SpookyV2.cpp
#    : <include>../../../boost/afio/detail

#;

# the required cpp file for the unit tests (for some reason gcc wants this availible to all tests)
local reqs = ../detail/SpookyV2.cpp   ;

# look in the commandline args for "--valgrind=" and capture its contents in VALGRIND_ARGS
local VALGRIND_ARGS = [ MATCH --valgrind=(.*) : $(.argv) ] ;


# if we're doing a valgrind build, set up the test launcher
if $(VALGRIND_ARGS)
{
  launcher =  <testing.launcher>valgrind ;
}

#auto generate the test_all.cpp
#SHELL "libs/afio/test/test_file_glob.sh"  ;

local test_files = [ glob  *.cpp : main.cpp ] ;

# link tests (just compile and links targets)
if "--link-test"  in $(.argv)  
{  
    # We can't use the test-suite if we're going to use a for loop
    #test-suite afio-link
    #  : [ for local x in $(test_files) {  link $(x) $(reqs) ; }  ]
    #;

    for local x in $(test_files)
    {
        link $(x) $(reqs) ;
    }


}
else # run actual tests
{
    if "--test-all" in $(.argv)   # run the whole test suite at once
    {
        test-suite afio
          : [ run test_all.cpp  $(reqs) : $(VALGRIND_ARGS) : : $(launcher) ] 

        ;
    }
    else        # otherwise run individual test files
    {
        for local file in $(test_files)
        { run $(file) $(reqs) : $(VALGRIND_ARGS) : : $(launcher) ; }

    }
}