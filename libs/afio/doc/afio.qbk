[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[library Boost.AFIO
    [quickbook 1.7]
    [version 0.1]
    [id afio]
    [category afio]
    [authors [Douglas, Niall], [Kirth, Paul]]
    [copyright 2013 Niall Douglas and Paul Kirth]
    [purpose A batch, chainable, asynchronous closure execution engine integrated into Boost.ASIO]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [source-mode c++]
]

[def __boost__ Boost]
[def __boost_afio__ Boost.AFIO]
[def __triplegit__ TripleGit]
[def __tick__ [role aligncenter [role green \u2714]]]
[def __itick__ [role aligncenter [role red \u2714]]]
[def __cross__ [role aligncenter [role red \u2718]]]
[def __icross__ [role aligncenter [role green \u2718]]]
[def __boost_asio__ [@http://www.boost.org/libs/asio/ Boost.ASIO]]
[def __boost_thread__ [@http://www.boost.org/libs/thread/ Boost.Thread]]
[def __boost_filesystem__ [@http://www.boost.org/libs/filesystem/ Boost.Filesystem]]
[def __boost_iostreams__ [@http://www.boost.org/libs/iostreams/ Boost.Iostreams]]
[def __WG21_N3562__ [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3562.pdf WG21 N3562 (Executors and schedulers)]]
[def __WG21_N3634__ [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3634.pdf WG21 N3634 (Improvements to std::future<T> and Related APIs)]]
[def ___WG21_N3634__ WG21 N3634 (Improvements to std::future<T> and Related APIs)]

[/ Commonly used links]
[def __afio_op__ [link afio.reference.structs.async_io_op `struct async_io_op`]]
[def __afio_when_all__ [link afio.reference.functions.when_all_ops `when_all()`]]
[def __afio_call__ [link afio.reference.classes.async_file_io_dispatcher_base.call_2_batch_bound_functions `async_file_io_dispatcher_base::call()`]]
[def __afio_barrier__ [link afio.reference.classes.async_file_io_dispatcher_base.barrier `async_file_io_dispatcher_base::barrier()`]]

[import ../test/examples/current_exception_hack.cpp]
[import ../test/examples/call_example.cpp]

[section:introduction Introduction]
__boost_afio__ is a linear scalable, batch, chainable, asynchronous closure execution engine extending __boost_asio__
and __boost_thread__ specialised as a portable asynchronous file i/o implementation
library. Implementation of this first version has been kept as simple as possible (< 1000 active
LOC) at the cost of some performance. This library was brought to __boost__ as part of Google
Summer of Code 2013.

Note that __boost_afio__ was originally written purely in C++11 and backported later to older compilers.
It requires, as an absolute minimum, a compiler with rvalue reference support. Some popular
compilers known to be minimally sufficient thanks to our Jenkins CI bot include:

* Microsoft Visual Studio 2010, released in 2010.
* GNU Compiler Collection v4.6, released in 2011, but may work with as early as GCC v4.3.
* clang v3.1, released in 2012, but may work with as early as clang v2.9.

Note that just because a compiler will compile the code does not mean performance will be good:
in particular, your compiler needs to be able to choose move construction where a copy
constructor is also available (known as rvalue references v2.1) and auto-generate implicit
move constructors when all member data types have move constructors (known as rvalue references
v3.0). You may find the list of C++11 features in popular compilers at
[@http://wiki.apache.org/stdcxx/C++0xCompilerSupport] useful. Similarly, just because a compiler
will compile the code does not mean that programming using that compiler and __boost_afio__
isn't a waste of your time. In particular, you should [*avoid VS2010 and Mingw32 (not Mingw-w64
which is fine) if at all possible], but if you can't, [link afio.advanced_topics.vs2010_notes we have written a guide especially for VS2010 and Mingw32].

As a very quick example of minimal usage:

[call_example]

[/ You can also schedule an asynchronous [link reference.when_all when_all()] using [link reference.async_file_io_dispatcher_base.barrier barrier()]. /]

[endsect] [/introduction]

[include design_rationale.qbk]
[include compiling.qbk]
[include quickstart.qbk]
[include reference.qbk]
[include advanced_topics.qbk]
[include release_notes.qbk]
[include acknowledgments.qbk]

