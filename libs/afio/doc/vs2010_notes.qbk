[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:vs2010_notes Notes on using AFIO with Microsoft Visual Studio 2010]

Due to the portability requirement of Boost peer review, we had to backport
__boost_afio__ (originally a pure C++11 library) to the last three major compiler
releases at the time of submission which were GCC 4.6-4.8, clang 3.1-3.3, and
Microsoft Visual Studio 2010-2013. Of all these compilers, by far and away the
worst experience for us was backporting to VS2010.

Unfortunately, VS2010 is the last Visual Studio which will work on Microsoft Windows
XP, and therefore as much as we would have loved to have dumped it, we had to do
the backport. The code in this library compiles on VS2010, but its unit tests are
not stable due to several severe bugs in the compiler or its runtime around which
did not find solutions. Because of that here is our first note:

[*If you possibly can, use VS2012 or later with its VS2010 inbuilt toolset to target
Windows XP. The VS2010 toolset bundled with VS2012 and later has many, many errors
with the headers and bugs with the runtime fixed and it uses a much superior compiler.]
The only problem, of course, is that VS2012 and later won't run on Windows XP, so if
you really must develop on Windows XP, strongly consider Mingw-w64 instead of
VS2010.

If you're reading on, then you must really want to use Microsoft Visual Studio 2010!
If so, we hope you enjoy debugging internal compiler errors :) which are unfortunately
only fixable through a lot of trial and error. Still:

# Don't use lambdas, or if you do, convert them to a `std::function` immediately. You'll
see this in AFIO code.
# Don't use `using namespace` instead of fully namespaced typenames, as the Koenig lookup
in VS2010 easily gets confused.
# Accept that exception propagation in __afio_barrier__ and __afio_when_all__ [*will] cause
segfaults! The cause of this bug is that
VS2010 doesn't like the following code when no exception is being thrown:

    try {
        throw;
    } catch(...)

 Unfortunately this is exactly what boost::current_exception() does, and AFIO needs that
 to detect if a completion routine is in the process of handling an exception. We could
 work around it with a major code factor, but seeing as it's fixed in the VS2010 runtime
 bundled with VS2012 and later we suggest you go use that instead.

[endsect]
