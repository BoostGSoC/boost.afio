[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.0, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\classboost_1_1afio_1_1detail_1_1async__data__op__req__impl.xml]
[section:detail_async_data_op_req_impl detail::async_data_op_req_impl]

'''<indexterm><primary>detail</primary></indexterm><indexterm><primary>async_data_op_req_impl</primary></indexterm>'''
The implementation of all async_data_op_req specialisations. 

[heading Synopsis]
``template<bool for_writing>
class detail::async_data_op_req_impl
{
  std::vector< boost_asio_buffer_type > buffers;  // A sequence of mutable Boost.ASIO buffers to read into. 
  async_io_op precondition;                       // An optional precondition for this operation. 
  off_t where;                                    // The offset from which to read. 
};
``

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[bool for_writing] [Whether this implementation is for writing data. ]]
]

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``async_data_op_req_impl()``

] [Default constructor. ] [


]]
[[``async_data_op_req_impl(const async_data_op_req_impl & o)``

] [Copy constructor. ] [[* const async_data_op_req_impl &]: ['o]:  




]]
[[``async_data_op_req_impl(async_data_op_req_impl && o)``

] [Move constructor. ] [[* async_data_op_req_impl &&]: ['o]:  




]]
[[``async_data_op_req_impl(const conversion_type & o)``

] [Copy constructor. ] [[* const conversion_type &]: ['o]:  




]]
[[``async_data_op_req_impl(conversion_type && o)``

] [Move constructor. ] [[* conversion_type &&]: ['o]:  




]]
[[``async_data_op_req_impl(async_io_op _precondition, void_type v, size_t _length, off_t _where)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  An optional precondition for this operation

[* void_type]: ['v]:  A pointer to memory or reference to object into which to read or write

[* size_t]: ['_length]:  The number of bytes to transfer 

[* off_t]: ['_where]:  The offset at which to transfer




]]
[[``template<class T>
async_data_op_req_impl(async_io_op _precondition, std::vector< T > _buffers, off_t _where)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  An optional precondition for this operation

[* std::vector< T >]: ['_buffers]:  A sequence of mutable/const Boost.ASIO buffers to read into/write from

[* off_t]: ['_where]:  The offset at which to transfer




]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``async_data_op_req_impl & operator=(const async_data_op_req_impl & o)``

] [Copy assignment. ] [[* const async_data_op_req_impl &]: ['o]:  




]]
[[``async_data_op_req_impl & operator=(async_data_op_req_impl && o)``

] [Move assignment. ] [[* async_data_op_req_impl &&]: ['o]:  




]]
[[``bool validate()``

] [Validates contents for correctness. ] [

][
True if contents are correct 


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

