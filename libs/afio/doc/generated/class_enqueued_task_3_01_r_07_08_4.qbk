[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\classboost_1_1afio_1_1enqueued__task_3_01_r_07_08_4.xml]
[section:enqueued_task< r()> enqueued_task< R()>]

'''<indexterm><primary>enqueued_task< R()></primary></indexterm>'''
Effectively our own custom std::packaged_task<>, with copy semantics and letting us early set value to significantly improve performance. 

[heading Description]
Unlike [^`std::packaged_task<>`], this custom variant is copyable though each copy always refers to the same internal state. Early future value setting is possible, with any subsequent value setting including that by the function being executed being ignored. Note that this behaviour opens the potential to lose exception state - if you set the future value early and then an exception is later thrown, the exception is swallowed. 

[heading Synopsis]
``template<class R>
class enqueued_task< R()>
      : public detail::enqueued_task_impl< R >
{
  // ...
};
``

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[class R] []]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``bool valid()``

] [Returns true if valid. ] [


]]
[[``void swap(enqueued_task_impl & o)``

] [Swaps contents with another instance. ] [[* enqueued_task_impl &]: ['o]:  




]]
[[``void reset()``

] [Resets the contents. ] [


]]
[[``future< R > get_future()``

] [Returns the future corresponding to the future return value of the task. ] [


]]
[[``void set_future_exception(exception_ptr e)``

] [Sets the future corresponding to the future return value of the task. ] [[* exception_ptr]: ['e]:  




]]
[[``void disable_auto_set_future(bool v = true)``

] [Disables the task setting the future return value. ] [[* bool]: ['v]:  




]]
[[`` enqueued_task()``

] [Default constructor. ] [


]]
[[`` enqueued_task(std::function< R()> c)``

] [Constructs an enqueued task calling ['c]. ] [[* std::function< R()>]: ['c]:  




]]
[[``template<class T>
void set_future_value(T v)``

] [Sets the future corresponding to the future return value of the task. ] [[* T]: ['v]:  




]]
[[``void operator()()``

] [Invokes the callable, setting the future to the value it returns. ] [


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

