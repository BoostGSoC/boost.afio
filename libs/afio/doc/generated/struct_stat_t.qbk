[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.0, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\structboost_1_1afio_1_1stat__t.xml]
[section:stat_t stat_t]

'''<indexterm><primary>stat_t</primary></indexterm>'''
Metadata about a directory entry. 

[heading Description]
This structure looks somewhat like a [^`struct stat`], and indeed it was derived from BSD's [^`struct stat`]. However there are a number of changes to better interoperate with modern practice, specifically: (i) inode value containers are forced to 64 bits (ii) Timestamps use C++11's [^`std::chrono::system_clock::time_point`] or Boost equivalent. The resolution of these may or may not equal what a [^`struct timespec`] can do depending on your STL (iii) The type of a file, which is available on Windows and on POSIX without needing a [^`lstat()`], is provided by [^`st_type`]. 

[heading Synopsis]
``struct stat_t
{
  off_t st_allocated;                            // bytes allocated for file (Windows, POSIX) 
  chrono::system_clock::time_point st_atim;      // time of last access (Windows, POSIX) 
  chrono::system_clock::time_point st_birthtim;  // time of file creation (Windows, FreeBSD, OS X) 
  uint16_t st_blksize;                           // block size used by this device (Windows, POSIX) 
  off_t st_blocks;                               // number of blocks allocated (Windows, POSIX) 
  chrono::system_clock::time_point st_ctim;      // time of last status change (Windows, POSIX) 
  uint64_t st_dev;                               // inode of device containing file (POSIX) 
  uint32_t st_flags;                             // user defined flags for file (FreeBSD, OS X) 
  uint32_t st_gen;                               // file generation number (FreeBSD, OS X) 
  int16_t st_gid;                                // group ID of the file (POSIX) 
  uint64_t st_ino;                               // inode of file (Windows, POSIX) 
  uint16_t st_mode;                              // type and perms of file (POSIX) 
  chrono::system_clock::time_point st_mtim;      // time of last data modification (Windows, POSIX) 
  int16_t st_nlink;                              // number of hard links (Windows, POSIX) 
  dev_t st_rdev;                                 // id of file if special (POSIX) 
  off_t st_size;                                 // file size, in bytes (Windows, POSIX) 
  uint16_t st_type;                              // type of file (Windows, POSIX) 
  int16_t st_uid;                                // user ID of the file (POSIX) 
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``stat_t()``

] [Constructs a UNINITIALIZED instance i.e. full of random garbage. ] [


]]
[[``stat_t(nullptr_t )``

] [Constructs a zeroed instance. ] [[* nullptr_t]: [']:  




]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

