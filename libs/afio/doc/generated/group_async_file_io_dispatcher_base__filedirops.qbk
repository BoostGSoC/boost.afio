[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.0, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__async__file__io__dispatcher__base____filedirops.xml]
[section:close_1_batch close (batch)]

'''<indexterm><primary>close</primary></indexterm>'''
Schedule a batch of asynchronous file or directory handle closes after preceding operations. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::close(const std::vector< async_io_op > & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of op handles.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if closing handles is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:close_1_single close (single)]

'''<indexterm><primary>close</primary></indexterm>'''
Schedule an asynchronous file or directory handle close after a preceding operation. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::close(const async_io_op & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [req] [An op handle.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if closing handles is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:dir_1_batch dir (batch)]

'''<indexterm><primary>dir</primary></indexterm>'''
Schedule a batch of asynchronous directory creations and opens after optional preconditions. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::dir(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if directory creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:dir_1_single dir (single)]

'''<indexterm><primary>dir</primary></indexterm>'''
Schedule an asynchronous directory creation and open after an optional precondition. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::dir(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if directory creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:file_1_batch file (batch)]

'''<indexterm><primary>file</primary></indexterm>'''
Schedule a batch of asynchronous file creations and opens after optional preconditions. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::file(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if file creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:file_1_single file (single)]

'''<indexterm><primary>file</primary></indexterm>'''
Schedule an asynchronous file creation and open after an optional precondition. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::file(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if file creation is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:read_1_batch read (batch)]

'''<indexterm><primary>read</primary></indexterm>'''
Schedule a batch of asynchronous data reads after preceding operations. 

[heading Description]

``
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered i/o (file\u005fflags::OSDirect) for which Windows provides special scatter/gather i/o functions.
``


[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::read(const std::vector< async_data_op_req< void >> & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_data_op_req< void >> &] [] [ops] [A batch of [^`async_data_op_req``<void>`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if reading data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][readwrite_example]


[endsect]

[section:read_1_single read (single)]

'''<indexterm><primary>read</primary></indexterm>'''
Schedule an asynchronous data read after a preceding operation. 

[heading Description]

``
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered i/o (file\u005fflags::OSDirect) for which Windows provides special scatter/gather i/o functions.
\return An op handle.
``


[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::read(const async_data_op_req< void > & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_data_op_req< void > &] [] [req] [An [^`async_data_op_req``<void>`] structure.]]
]


[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if reading data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][readwrite_example]


[endsect]

[section:read_1_batch read (batch)]

'''<indexterm><primary>read</primary></indexterm>'''
Schedule a batch of asynchronous data reads after preceding operations. 

[heading Description]

``
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered i/o (file\u005fflags::OSDirect) for which Windows provides special scatter/gather i/o functions.
\return A batch of op handles.
``


[heading Synopsis]
``template<class T>
std::vector< async_io_op > async_file_io_dispatcher_base::read(const std::vector< async_data_op_req< T >> & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class T] [Any arbitrary type. ] [ - ] [Must be specified]]
[[const std::vector< async_data_op_req< T >> &] [] [ops] [A batch of [^`async_data_op_req``<T>`] structures.]]
]


[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if reading data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][readwrite_example]


[endsect]

[section:rmdir_1_batch rmdir (batch)]

'''<indexterm><primary>rmdir</primary></indexterm>'''
Schedule a batch of asynchronous directory deletions after optional preconditions. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::rmdir(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if directory deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:rmdir_1_single rmdir (single)]

'''<indexterm><primary>rmdir</primary></indexterm>'''
Schedule an asynchronous directory deletion after an optional precondition. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::rmdir(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if directory deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:rmfile_1_batch rmfile (batch)]

'''<indexterm><primary>rmfile</primary></indexterm>'''
Schedule a batch of asynchronous file deletions after optional preconditions. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::rmfile(const std::vector< async_path_op_req > & reqs)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_path_op_req > &] [] [reqs] [A batch of [^`async_path_op_req`] structures.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if file deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:rmfile_1_single rmfile (single)]

'''<indexterm><primary>rmfile</primary></indexterm>'''
Schedule an asynchronous file deletion after an optional precondition. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::rmfile(const async_path_op_req & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_path_op_req &] [] [req] [An [^`async_path_op_req`] structure.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if file deletion is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][filedir_example]


[endsect]

[section:sync_1_batch sync (batch)]

'''<indexterm><primary>sync</primary></indexterm>'''
Schedule a batch of asynchronous content synchronisations with physical storage after preceding operations. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::sync(const std::vector< async_io_op > & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of op handles.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if content synchronisation is constant time (which is extremely unlikely).
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][sync_example]


[endsect]

[section:sync_1_single sync (single)]

'''<indexterm><primary>sync</primary></indexterm>'''
Schedule an asynchronous content synchronisation with physical storage after a preceding operation. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::sync(const async_io_op & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [req] [An op handle.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if content synchronisation is constant time (which is extremely unlikely).
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][sync_example]


[endsect]

[section:truncate_2_batch truncate (batch)]

'''<indexterm><primary>truncate</primary></indexterm>'''
Schedule a batch of asynchronous file length truncations after preceding operations. 

[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::truncate(const std::vector< async_io_op > & ops, const std::vector< off_t > & sizes)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of op handles. ]]
[[const std::vector< off_t > &] [] [sizes] [A batch of new lengths.]]
]


[heading Returns]
A batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if truncating file lengths is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][truncate_example]


[endsect]

[section:truncate_2_single truncate (single)]

'''<indexterm><primary>truncate</primary></indexterm>'''
Schedule an asynchronous data write after a preceding operation. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::truncate(const async_io_op & op, off_t newsize)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [op] [An op handle. ]]
[[off_t] [] [newsize] [The new size for the file.]]
]


[heading Returns]
An op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if truncating file lengths is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][truncate_example]


[endsect]

[section:write_1_batch write (batch)]

'''<indexterm><primary>write</primary></indexterm>'''
Schedule a batch of asynchronous data writes after preceding operations. 

[heading Description]

``
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered i/o (file\u005fflags::OSDirect) for which Windows provides special scatter/gather i/o functions.
\return A batch of op handles.
``


[heading Synopsis]
``virtual std::vector<async_io_op> async_file_io_dispatcher_base::write(const std::vector< async_data_op_req< const void >> & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_data_op_req< const void >> &] [] [ops] [A batch of [^`async_data_op_req``<const void>`] structures.]]
]


[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if writing data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][readwrite_example]


[endsect]

[section:write_1_single write (single)]

'''<indexterm><primary>write</primary></indexterm>'''
Schedule an asynchronous data write after a preceding operation. 

[heading Description]

``
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered i/o (file\u005fflags::OSDirect) for which Windows provides special scatter/gather i/o functions.
\return An op handle.
``


[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::write(const async_data_op_req< const void > & req)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_data_op_req< const void > &] [] [req] [An [^`async_data_op_req``<const void>`] structure.]]
]


[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete if writing data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][readwrite_example]


[endsect]

[section:write_1_batch write (batch)]

'''<indexterm><primary>write</primary></indexterm>'''
Schedule a batch of asynchronous data writes after preceding operations. 

[heading Description]

``
Note that on Windows this call issues a separate async file operation for each buffer supplied, thus making scatter/gather i/o no more efficient than making separate calls. The big exception to this is when doing unbuffered i/o (file\u005fflags::OSDirect) for which Windows provides special scatter/gather i/o functions.
\return A batch of op handles.
``


[heading Synopsis]
``template<class T>
std::vector< async_io_op > async_file_io_dispatcher_base::write(const std::vector< async_data_op_req< T >> & ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class T] [Any arbitrary type. ] [ - ] [Must be specified]]
[[const std::vector< async_data_op_req< T >> &] [] [ops] [A batch of [^`async_data_op_req``<T>`] structures.]]
]


[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete if writing data is constant time.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][readwrite_example]


[endsect]

