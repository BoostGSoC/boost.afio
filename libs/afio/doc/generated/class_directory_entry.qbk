[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.0, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\classboost_1_1afio_1_1directory__entry.xml]
[section:directory_entry directory_entry]

'''<indexterm><primary>directory_entry</primary></indexterm>'''
The abstract base class for an entry in a directory with lazily filled metadata. 

[heading Synopsis]
``class directory_entry
{
  // ...
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``directory_entry()``

] [Default constructor. ] [


]]
[[``directory_entry(std::filesystem::path _leafname, stat_t __stat, metadata_flags _have_metadata)``

] [Default constructor. ] [[* std::filesystem::path]: ['_leafname]:  

[* stat_t]: ['__stat]:  

[* metadata_flags]: ['_have_metadata]:  




]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``bool operator==(const directory_entry & rhs)``

] [] [[* const directory_entry &]: ['rhs]:  




]]
[[``bool operator!=(const directory_entry & rhs)``

] [] [[* const directory_entry &]: ['rhs]:  




]]
[[``bool operator<(const directory_entry & rhs)``

] [] [[* const directory_entry &]: ['rhs]:  




]]
[[``bool operator<=(const directory_entry & rhs)``

] [] [[* const directory_entry &]: ['rhs]:  




]]
[[``bool operator>(const directory_entry & rhs)``

] [] [[* const directory_entry &]: ['rhs]:  




]]
[[``bool operator>=(const directory_entry & rhs)``

] [] [[* const directory_entry &]: ['rhs]:  




]]
[[``std::filesystem::path name()``

] [The name of the directory entry. ] [


]]
[[``metadata_flags metadata_ready()``

] [A bitfield of what metadata is ready right now. ] [


]]
[[``metadata_flags fetch_metadata(std::shared_ptr< async_io_handle > dirh, metadata_flags wanted)``

] [Fetches the specified metadata, returning that newly available. This is a blocking call. ] [[* std::shared_ptr< async_io_handle >]: ['dirh]:  

[* metadata_flags]: ['wanted]:  




]]
[[``stat_t full_lstat(std::shared_ptr< async_io_handle > dirh, metadata_flags wanted = directory_entry::metadata_fastpath())``

] [Fetches a fast path [^`stat_t`] structure which is missing those fields not fast to fetch on this platform. ] [[* std::shared_ptr< async_io_handle >]: ['dirh]:  

[* metadata_flags]: ['wanted]:  




]]
[[``metadata_flags metadata_supported()``

] [Returns st_dev. ] [


]]
[[``metadata_flags metadata_fastpath()``

] [A bitfield of what metadata is fast on this platform. This doesn't mean all is available for every filing system. ] [


]]
[[``size_t compatibility_maximum()``

] [The maximum number of entries which is "usual" to fetch at once i.e. what your libc does. ] [


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

