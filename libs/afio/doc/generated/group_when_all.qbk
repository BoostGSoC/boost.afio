[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.0, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__when__all.xml]
[section:when_all_2 when_all]

'''<indexterm><primary>when_all</primary></indexterm>'''
Returns a future vector of results from all the supplied futures

[heading Synopsis]
``template<class InputIterator>
future<std::vector<typename std::decay<decltype(((typename InputIterator::value_type *) 0)->get())>::type> when_all(InputIterator first, InputIterator last)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class InputIterator] [] [ - ] [Must be specified]]
[[InputIterator] [] [first] []]
[[InputIterator] [] [last] []]
]


[heading Header]
`#include <boost/afio/afio.hpp>`


[endsect]

[section:when_all_3 when_all]

'''<indexterm><primary>when_all</primary></indexterm>'''
Convenience overload for a vector of async\u005fio\u005fop. Does not retrieve exceptions.

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::nothrow_t , std::vector< async_io_op >::iterator first, std::vector< async_io_op >::iterator last)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::nothrow_t] [] [] []]
[[std::vector< async_io_op >::iterator] [] [first] []]
[[std::vector< async_io_op >::iterator] [] [last] []]
]


[heading Header]
`#include <boost/afio/afio.hpp>`


[endsect]

[section:when_all_2 when_all]

'''<indexterm><primary>when_all</primary></indexterm>'''
Convenience overload for a vector of async\u005fio\u005fop. Retrieves exceptions.

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::vector< async_io_op >::iterator first, std::vector< async_io_op >::iterator last)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::vector< async_io_op >::iterator] [] [first] []]
[[std::vector< async_io_op >::iterator] [] [last] []]
]


[heading Header]
`#include <boost/afio/afio.hpp>`


[endsect]

[section:when_all_2 when_all]

'''<indexterm><primary>when_all</primary></indexterm>'''
Convenience overload for a list of async\u005fio\u005fop. Does not retrieve exceptions.

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::nothrow_t _, std::initializer_list< async_io_op > _ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::nothrow_t] [] [_] []]
[[std::initializer_list< async_io_op >] [] [_ops] []]
]


[heading Header]
`#include <boost/afio/afio.hpp>`


[endsect]

[section:when_all_1 when_all]

'''<indexterm><primary>when_all</primary></indexterm>'''
Convenience overload for a list of async\u005fio\u005fop. Retrieves exceptions.

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::initializer_list< async_io_op > _ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::initializer_list< async_io_op >] [] [_ops] []]
]


[heading Header]
`#include <boost/afio/afio.hpp>`


[endsect]

[section:when_all_2 when_all]

'''<indexterm><primary>when_all</primary></indexterm>'''
Convenience overload for a single async\u005fio\u005fop. Does not retrieve exceptions.

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::nothrow_t _, async_io_op op)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::nothrow_t] [] [_] []]
[[async_io_op] [] [op] []]
]


[heading Header]
`#include <boost/afio/afio.hpp>`


[endsect]

[section:when_all_1 when_all]

'''<indexterm><primary>when_all</primary></indexterm>'''
Convenience overload for a single async\u005fio\u005fop. Retrieves exceptions.

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(async_io_op op)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[async_io_op] [] [op] []]
]


[heading Header]
`#include <boost/afio/afio.hpp>`


[endsect]

[section:when_any when_any (iterator range)]

'''<indexterm><primary>when_any</primary></indexterm>'''
Returns a future tuple of results from all the supplied futures. 

[heading Description]
Returns a future result from the first of the supplied futures

[heading Synopsis]
``template<class InputIterator>
future<std::pair<size_t, typename std::decay<decltype(((typename InputIterator::value_type *) 0)->get())>::type> when_any(InputIterator first, InputIterator last)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class InputIterator] [] [ - ] [Must be specified]]
[[InputIterator] [] [first] []]
[[InputIterator] [] [last] []]
]


[heading Header]
`#include <boost/afio/afio.hpp>`


[endsect]

