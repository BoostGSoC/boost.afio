[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.0, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__async__file__io__dispatcher__base____completion.xml]
[section:completion_2_batch_bound_functions completion (batch bound functions)]

'''<indexterm><primary>completion</primary></indexterm>'''
Invoke the specified functions when each of the supplied operations complete. 

[heading Synopsis]
``std::vector<async_io_op> async_file_io_dispatcher_base::completion(const std::vector< async_io_op > & ops, const std::vector< std::pair< async_op_flags, std::function< async_file_io_dispatcher_base::completion_t >>> & callbacks)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const std::vector< async_io_op > &] [] [ops] [A batch of precondition op handles. ]]
[[const std::vector< std::pair< async_op_flags, std::function< async_file_io_dispatcher_base::completion_t >>> &] [] [callbacks] [A batch of pairs of op flags and bound completion handler functions of type [^`completion_t`]]]
]


[heading Returns]
A batch of op handles 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(N) to dispatch. Amortised O(N/threadpool) to complete.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][completion_example]


[endsect]

[section:completion_2_convenience_single_bound_function completion (convenience single bound function)]

'''<indexterm><primary>completion</primary></indexterm>'''
Invoke the specified single function when the supplied single operation completes. 

[heading Synopsis]
``async_io_op async_file_io_dispatcher_base::completion(const async_io_op & req, const std::pair< async_op_flags, std::function< async_file_io_dispatcher_base::completion_t >> & callback)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[const async_io_op &] [] [req] [A precondition op handle ]]
[[const std::pair< async_op_flags, std::function< async_file_io_dispatcher_base::completion_t >> &] [] [callback] [A pair of op flag and bound completion handler function of type [^`completion_t`]]]
]


[heading Returns]
An op handle 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]Amortised O(1) to dispatch. Amortised O(1) to complete.
[heading Exception Model]Propagates exceptions of any input preconditions with an errored state at the point of dispatch, and throws a `std::runtime_error` if any inputs have values which could not possibly be correct.
[heading Example][completion_example]


[endsect]

