[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.0, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__async__file__io__dispatcher____call.xml]
[section:call_2_batch_bound_functions call (batch bound functions)]

'''<indexterm><primary>call</primary></indexterm>'''
Schedule a batch of asynchronous invocations of the specified bound functions when their supplied preconditions complete.  

[heading Synopsis]
``template<class R>
std::pair< std::vector< future< R > >, std::vector< async_io_op > > async_file_io_dispatcher_base::call(const std::vector< async_io_op > & ops, const std::vector< std::function< R()>> & callables)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class R] [] [ - ] [Must be specified]]
[[const std::vector< async_io_op > &] [] [ops] [A batch of precondition op handles. If default constructed, a precondition is null. ]]
[[const std::vector< std::function< R()>> &] [] [callables] [A batch of bound functions to call, returning R.]]
]


[heading Returns]
A pair with a batch of futures returning the result of each of the callables and a batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Example]
   [call_example]


[endsect]

[section:call_1_convenience_batch_bound_functions_without_preconditions call (convenience batch bound functions without preconditions)]

'''<indexterm><primary>call</primary></indexterm>'''
Schedule a batch of asynchronous invocations of the specified bound functions when their supplied preconditions complete. 

[heading Synopsis]
``template<class R>
std::pair<std::vector<future<R> >, std::vector<async_io_op> > async_file_io_dispatcher_base::call(const std::vector< std::function< R()>> & callables)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class R] [] [ - ] [Must be specified]]
[[const std::vector< std::function< R()>> &] [] [callables] [A batch of bound functions to call, returning R.]]
]


[heading Returns]
A pair with a batch of futures returning the result of each of the callables and a batch of op handles. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Example]
   [call_example]


[endsect]

[section:call_2_convenience_single_bound_function call (convenience single bound function)]

'''<indexterm><primary>call</primary></indexterm>'''
Schedule an asynchronous invocation of the specified bound function when its supplied precondition completes. 

[heading Synopsis]
``template<class R>
std::pair< future< R >, async_io_op > async_file_io_dispatcher_base::call(const async_io_op & req, std::function< R()> callback)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class R] [] [ - ] [Must be specified]]
[[const async_io_op &] [] [req] [A precondition op handle. If default constructed, the precondition is null. ]]
[[std::function< R()>] [] [callback] [A bound functions to call, returning R.]]
]


[heading Returns]
A pair with a future returning the result of the callable and an op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Example]
   [call_example]


[endsect]

[section:call_3_convenience_single_unbound_callable call (convenience single unbound callable)]

'''<indexterm><primary>call</primary></indexterm>'''
Schedule an asynchronous invocation of the specified unbound callable when its supplied precondition completes. Note that this function essentially calls [^`std::bind()`] on the callable and the args and passes it to the other call() overload taking a [^`std::function<>`]. You should therefore use [^`std::ref()`] etc. as appropriate. 

[heading Synopsis]
``template<class C, class... Args>
std::pair< future< typename std::result_of< C(Args...)>::type >, async_io_op > async_file_io_dispatcher_base::call(const async_io_op & req, C callback, Args... args)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[class C] [] [ - ] [Must be specified]]
[[Args] [] [ - ] [Must be specified]]
[[const async_io_op &] [] [req] [A precondition op handle. If default constructed, the precondition is null. ]]
[[C] [] [callback] [An unbound callable to call. ]]
[[Args...] [] [args] [An arbitrary sequence of arguments to bind to the callable.]]
]


[heading Returns]
A pair with a future returning the result of the callable and an op handle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Example]
   [call_example]


[endsect]

