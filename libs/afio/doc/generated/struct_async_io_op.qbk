[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.0, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\structboost_1_1afio_1_1async__io__op.xml]
[section:async_io_op async_io_op]

'''<indexterm><primary>async_io_op</primary></indexterm>'''
A reference to an asynchronous operation. 

[heading Description]
The id field is always valid (and non-zero) if this reference is valid. The h field, being the shared state between all references referring to the same op, only becomes a non-default shared\u005ffuture when the op has actually begun execution. You should therefore [*never] try waiting via h->get() until you are absolutely sure that the op has already started. 

[heading Synopsis]
``struct async_io_op
{
  std::shared_ptr< shared_future< std::shared_ptr< detail::async_io_handle > > > h;  // A future handle to the item being operated upon. 
  size_t id;                                                                         // A unique id for this operation. 
  std::shared_ptr< async_file_io_dispatcher_base > parent;                           // The parent dispatcher. 
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``async_io_op()``

] [Default constructor. ] [


]]
[[``async_io_op(const async_io_op & o)``

] [Copy constructor. ] [[* const async_io_op &]: ['o]:  




]]
[[``async_io_op(async_io_op && o)``

] [Move constructor. ] [[* async_io_op &&]: ['o]:  




]]
[[``async_io_op(std::shared_ptr< async_file_io_dispatcher_base > _parent, size_t _id, std::shared_ptr< shared_future< std::shared_ptr< detail::async_io_handle >>> _handle)``

] [] [[* std::shared_ptr< async_file_io_dispatcher_base >]: ['_parent]:  The dispatcher this op belongs to. 

[* size_t]: ['_id]:  The unique non-zero id of this op. 

[* std::shared_ptr< shared_future< std::shared_ptr< detail::async_io_handle >>>]: ['_handle]:  A shared_ptr to shared state between all instances of this reference. 




]]
[[``async_io_op(std::shared_ptr< async_file_io_dispatcher_base > _parent, size_t _id)``

] [] [[* std::shared_ptr< async_file_io_dispatcher_base >]: ['_parent]:  The dispatcher this op belongs to. 

[* size_t]: ['_id]:  The unique non-zero id of this op. 




]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``async_io_op & operator=(const async_io_op & o)``

] [Copy assignment. ] [[* const async_io_op &]: ['o]:  




]]
[[``async_io_op & operator=(async_io_op && o)``

] [Move assignment. ] [[* async_io_op &&]: ['o]:  




]]
[[``bool validate()``

] [Validates contents. ] [


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

