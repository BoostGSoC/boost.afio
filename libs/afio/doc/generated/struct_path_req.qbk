[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\structboost_1_1afio_1_1path__req.xml]
[section:path_req path_req]
'''<?dbhtml-include href="disqus_identifiers/path_req.html"?>'''

'''<indexterm><primary>path_req</primary></indexterm>'''
A convenience bundle of path and flags, with optional precondition. Paths may be a path fragment (relative to the precondition) or absolute, in which case if necessary they are made canonical and absolute in the constructor according to the current working directory. 

[heading Synopsis]
``struct path_req
{
  bool is_relative;        // Whether the precondition is also where this path begins. 
  boost::afio::path path;  // The filing system path to be used for this operation. 
  file_flags flags;        // The flags to be used for this operation (note they can be overriden by flags passed during dispatcher construction). 
  future precondition;     // An optional precondition for this operation 
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``path_req()``

] [Default constructor. ] [

]]
[[``path_req(const path_req & o)``

] [Copy constructor. ] [[* const path_req &]: ['o]:  



]]
[[``path_req(path_req && o)``

] [Move constructor. ] [[* path_req &&]: ['o]:  



]]
[[``path_req(absolute && o)``

] [Move constructor. ] [[* absolute &&]: ['o]:  



]]
[[``path_req(relative && o)``

] [Move constructor. ] [[* relative &&]: ['o]:  



]]
[[``template<class T, typename>
path_req(T && _path, file_flags _flags = file_flags::none)``

] [Constructs an instance. ] [[* T &&]: ['_path]:  The filing system path to be used. 

[* file_flags]: ['_flags]:  The flags to be used. 



]]
[[``template<class T, typename>
path_req(bool _is_relative, future<> _precondition, T && _path,
          file_flags _flags = file_flags::none)``

] [Constructs an instance. ] [[* bool]: ['_is_relative]:  Whether the precondition is where the path begins 

[* future<>]: ['_precondition]:  The precondition for this operation. 

[* T &&]: ['_path]:  The filing system path to be used. 

[* file_flags]: ['_flags]:  The flags to be used. 



]]
[[``path_req(bool _is_relative, future<> _precondition, boost::afio::path _path,
          file_flags _flags = file_flags::none)``

] [] [[* bool]: ['_is_relative]:  

[* future<>]: ['_precondition]:  

[* boost::afio::path]: ['_path]:  

[* file_flags]: ['_flags]:  



]]
[[``path_req(future<> _precondition, file_flags _flags = file_flags::none)``

] [Constructs an instance. ] [[* future<>]: ['_precondition]:  The precondition for this operation (used as the path). 

[* file_flags]: ['_flags]:  The flags to be used. 



]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``bool validate()``

] [Validates contents. ] [

][

]
]
]

[heading Header]
`#include <boost/afio/v2/afio.hpp>`

[include generated/struct_path_req_1_1absolute.qbk]
[include generated/struct_path_req_1_1relative.qbk]

'''<?dbhtml-include href="disqus_comments.html"?>'''
[endsect]

