[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.0, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml\group__when__all__ops.xml]
[section:when_all_3_vector_batch_of_ops_not_exception_propagating when_all (vector batch of ops not exception propagating)]

'''<indexterm><primary>when_all</primary></indexterm>'''
Returns a result when all the supplied ops complete. Does not propagate exception states. 

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::nothrow_t _, std::vector< async_io_op >::iterator first, std::vector< async_io_op >::iterator last)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::nothrow_t] [] [_] [An instance of std::nothrow_t. ]]
[[std::vector< async_io_op >::iterator] [] [first] [A vector iterator pointing to the first async_io_op to wait upon. ]]
[[std::vector< async_io_op >::iterator] [] [last] [A vector iterator pointing after the last async_io_op to wait upon.]]
]


[heading Returns]
A future vector of shared\u005fptr's to detail::async\u005fio\u005fhandle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(N) to dispatch. O(N/threadpool) to complete, but at least one cache line is contended between threads.
[heading Exception Model]Non propagating


[endsect]

[section:when_all_2_vector_batch_of_ops_exception_propagating when_all (vector batch of ops exception propagating)]

'''<indexterm><primary>when_all</primary></indexterm>'''
Returns a result when all the supplied ops complete. Propagates exception states. 

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::vector< async_io_op >::iterator first, std::vector< async_io_op >::iterator last)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::vector< async_io_op >::iterator] [] [first] [A vector iterator pointing to the first async_io_op to wait upon. ]]
[[std::vector< async_io_op >::iterator] [] [last] [A vector iterator pointing after the last async_io_op to wait upon.]]
]


[heading Returns]
A future vector of shared\u005fptr's to detail::async\u005fio\u005fhandle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(N) to dispatch. O(N/threadpool) to complete, but at least one cache line is contended between threads.
[heading Exception Model]Propagating


[endsect]

[section:when_all_2_initializer_list_batch_of_ops_not_exception_propagating when_all (initializer_list batch of ops not exception propagating)]

'''<indexterm><primary>when_all</primary></indexterm>'''
Returns a result when all the supplied ops complete. Does not propagate exception states. 

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::nothrow_t _, std::initializer_list< async_io_op > _ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::nothrow_t] [] [_] [An instance of std::nothrow_t. ]]
[[std::initializer_list< async_io_op >] [] [_ops] [A std::initializer_list<> of async_io_op's to wait upon.]]
]


[heading Returns]
A future vector of shared\u005fptr's to detail::async\u005fio\u005fhandle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(N) to dispatch. O(N/threadpool) to complete, but at least one cache line is contended between threads.
[heading Exception Model]Non propagating


[endsect]

[section:when_all_1_initializer_list_batch_of_ops_exception_propagating when_all (initializer_list batch of ops exception propagating)]

'''<indexterm><primary>when_all</primary></indexterm>'''
Returns a result when all the supplied ops complete. Propagates exception states. 

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::initializer_list< async_io_op > _ops)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::initializer_list< async_io_op >] [] [_ops] [A std::initializer_list<> of async_io_op's to wait upon.]]
]


[heading Returns]
A future vector of shared\u005fptr's to detail::async\u005fio\u005fhandle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(N) to dispatch. O(N/threadpool) to complete, but at least one cache line is contended between threads.
[heading Exception Model]Propagating


[endsect]

[section:when_all_2_convenience_single_op_not_exception_propagating when_all (convenience single op not exception propagating)]

'''<indexterm><primary>when_all</primary></indexterm>'''
Returns a result when the supplied op completes. Does not propagate exception states. 

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(std::nothrow_t _, async_io_op op)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[std::nothrow_t] [] [_] [An instance of std::nothrow_t. ]]
[[async_io_op] [] [op] [An async_io_op to wait upon.]]
]


[heading Returns]
A future vector of shared\u005fptr's to detail::async\u005fio\u005fhandle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(1) to dispatch. O(1) to complete.
[heading Exception Model]Non propagating


[endsect]

[section:when_all_1_convenience_single_op_exception_propagating when_all (convenience single op exception propagating)]

'''<indexterm><primary>when_all</primary></indexterm>'''
Returns a result when the supplied op completes. Propagates exception states. 

[heading Synopsis]
``future<std::vector<std::shared_ptr<detail::async_io_handle> > > when_all(async_io_op op)``

[heading Parameters]

[table
[[Type] [Concept] [Name] [Description] ]
[[async_io_op] [] [op] [An async_io_op to wait upon.]]
]


[heading Returns]
A future vector of shared\u005fptr's to detail::async\u005fio\u005fhandle. 

[heading Header]
`#include <boost/afio/afio.hpp>`

[heading Complexity]O(1) to dispatch. O(1) to complete.
[heading Exception Model]Non propagating


[endsect]

