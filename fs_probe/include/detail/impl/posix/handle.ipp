/* handle.hpp
A handle to a file
(C) 2015 Niall Douglas http://www.nedprod.com/
File Created: Dec 2015


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "../../../handle.hpp"

#include <unistd.h>
#include <fcntl.h>
#if BOOST_AFIO_USE_POSIX_AIO
# include <aio.h>
#endif

BOOST_AFIO_V2_NAMESPACE_BEGIN

result<handle> handle::clone(io_service &service, handle::mode mode, handle::caching caching) const noexcept
{
  result<handle> ret(handle(&service, _path, native_handle_type(), _caching, _flags));
  ret.value()._v.behaviour = _v.behaviour;
  if (-1 == (ret.value()._v.fd = ::dup(_v.fd)))
    return make_errored_result<handle>(errno);
  if (mode != mode::unchanged)
  {
    ret.value()._v.behaviour = _v.behaviour & ~(native_handle_type::disposition::readable | native_handle_type::disposition::writable | native_handle_type::disposition::append_only);
    int attribs = 0;
    if (-1 == (attribs = fcntl(ret.value()._v.fd, F_GETFL)))
      return make_errored_result<handle>(errno);
    switch (mode)
    {
    case mode::unchanged:
      break;
    case mode::none:
    case mode::attr_read:
    case mode::attr_write:
    case mode::read:
      return make_errored_result<handle>(EINVAL);
    case mode::write:
      attribs&=~O_APPEND;
      ret.value()._v.behaviour |= native_handle_type::disposition::readable| native_handle_type::disposition::writable;
      break;
    case mode::append:
      attribs |= O_APPEND;
      ret.value()._v.behaviour |= native_handle_type::disposition::append_only | native_handle_type::disposition::writable;
      break;
    }
    if(-1==fcntl(ret.value()._v.fd, F_SETFL, attribs))
      return make_errored_result<handle>(errno);
  }
  if (caching != caching::unchanged && caching != _caching)
  {
    // TODO: Allow fiddling with O_DIRECT
    return make_errored_result<handle>(EINVAL);
  }
  return ret;
}

result<file_handle> file_handle::file(io_service &service, file_handle::path_type _path, file_handle::mode _mode, file_handle::creation _creation, file_handle::caching _caching, file_handle::flag flags) noexcept
{
  result<file_handle> ret(file_handle(&service, std::move(_path), native_handle_type(), _caching, flags));
  native_handle_type &nativeh = ret.get()._v;
  int attribs = 0;
  switch (_mode)
  {
  case mode::unchanged:
    return make_errored_result<file_handle>(EINVAL);
  case mode::none:
    break;
  case mode::attr_read:
  case mode::read:
    attribs = O_RDONLY;
    nativeh.behaviour |= native_handle_type::disposition::seekable|native_handle_type::disposition::readable;
    break;
  case mode::attr_write:
  case mode::write:
    attribs = O_RDWR;
    nativeh.behaviour |= native_handle_type::disposition::seekable | native_handle_type::disposition::readable| native_handle_type::disposition::writable;
    break;
  case mode::append:
    attribs = O_APPEND;
    nativeh.behaviour |= native_handle_type::disposition::writable|native_handle_type::disposition::append_only;
    break;
  }
  switch (_creation)
  {
  case creation::open_existing:
    break;
  case creation::only_if_not_exist:
    attribs |= O_CREAT | O_EXCL;
    break;
  case creation::if_needed:
    attribs |= O_CREAT;
    break;
  case creation::truncate:
    attribs |= O_TRUNC;
    break;
  }
  nativeh.behaviour |= native_handle_type::disposition::file;
  switch (_caching)
  {
  case caching::unchanged:
    return make_errored_result<file_handle>(EINVAL);
  case caching::none:
    attribs |= O_SYNC | O_DIRECT;
    nativeh.behaviour |= native_handle_type::disposition::aligned_io;
    break;
  case caching::only_metadata:
    attribs |= O_DIRECT;
    nativeh.behaviour |= native_handle_type::disposition::aligned_io;
    break;
  case caching::reads:
    attribs |= O_SYNC;
    break;
  case caching::reads_and_metadata:
#ifdef O_DSYNC
    attribs |= O_DSYNC;
#else
    attribs |= O_SYNC;
#endif
    break;
  case caching::all:
  case caching::safety_fsyncs:
  case caching::temporary:
    break;
  }
  if (-1 == (nativeh.fd = ::open(ret.value()._path.c_str(), attribs, 0x1b0/*660*/)))
    return make_errored_result<file_handle>(errno);
  if (_creation == creation::truncate && ret.value().are_safety_fsyncs_issued())
    fsync(nativeh.fd);
  return ret;
}

handle::~handle()
{
  if (_v)
  {
    if(are_safety_fsyncs_issued())
    {
      fsync(_v.fd);
    }
    ::close(_v.fd);
    _v = native_handle_type();
  }
}

template<class CompletionRoutine, class BuffersType, class IORoutine> result<file_handle::io_state_ptr<CompletionRoutine, BuffersType>> file_handle::_begin_io(file_handle::io_request<BuffersType> reqs, CompletionRoutine &&completion, IORoutine &&ioroutine) noexcept
{
#error todo
}

template<class CompletionRoutine> result<file_handle::io_state_ptr<CompletionRoutine, file_handle::buffers_type>> file_handle::async_read(file_handle::io_request<file_handle::buffers_type> reqs, CompletionRoutine &&completion) noexcept
{
//  return _begin_io(std::move(reqs), [completion=std::forward<CompletionRoutine>(completion)](auto *state) {
//    completion(state->parent, state->result);
//  }, ReadFileEx);
}

template<class CompletionRoutine> result<file_handle::io_state_ptr<CompletionRoutine, file_handle::const_buffers_type>> file_handle::async_write(file_handle::io_request<file_handle::const_buffers_type> reqs, CompletionRoutine &&completion) noexcept
{
//  return _begin_io(std::move(reqs), [completion = std::forward<CompletionRoutine>(completion)](auto *state) {
//    completion(state->parent, state->result);
//  }, WriteFileEx);
}

# if 0
file_handle::io_result<file_handle::buffers_type> file_handle::read(file_handle::io_request<file_handle::buffers_type> reqs, deadline d) noexcept
{
  io_result<buffers_type> ret;
  auto _io_state(_begin_io(std::move(reqs), [&ret](auto *state) {
    ret = std::move(state->result);
  }, ReadFileEx));
  BOOST_OUTCOME_FILTER_ERROR(io_state, _io_state);

  // While i/o is not done pump i/o completion
  while (!ret)
  {
    auto t(_service->run_until(d));
    // If i/o service pump failed or timed out, cancel outstanding i/o and return
    if (!t)
      return make_errored_result<buffers_type>(t.get_error());
  }
  return ret;
}

file_handle::io_result<file_handle::const_buffers_type> file_handle::write(file_handle::io_request<file_handle::const_buffers_type> reqs, deadline d) noexcept
{
  io_result<const_buffers_type> ret;
  auto _io_state(_begin_io(std::move(reqs), [&ret](auto *state) {
    ret = std::move(state->result);
  }, WriteFileEx));
  BOOST_OUTCOME_FILTER_ERROR(io_state, _io_state);

  // While i/o is not done pump i/o completion
  while (!ret)
  {
    auto t(_service->run_until(d));
    // If i/o service pump failed or timed out, cancel outstanding i/o and return
    if (!t)
      return make_errored_result<const_buffers_type>(t.get_error());
  }
  return ret;
}
#endif

result<file_handle::extent_type> file_handle::truncate(file_handle::extent_type newsize) noexcept
{
#error todo
}

BOOST_AFIO_V2_NAMESPACE_END
