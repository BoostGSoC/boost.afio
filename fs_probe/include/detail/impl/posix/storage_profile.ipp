/* storage_profile.hpp
A profile of an OS and filing system
(C) 2016 Niall Douglas http://www.nedprod.com/
File Created: Jan 2016


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "../../../storage_profile.hpp"
#include "../../../handle.hpp"

#include <unistd.h>
#include <sys/utsname.h>  // for uname()
#include <sys/ioctl.h>
#if defined(__linux__)
# include <linux/fs.h>
#else
# include <sys/sysctl.h>
# include <sys/disk.h>
#endif

BOOST_AFIO_V2_NAMESPACE_BEGIN

namespace storage_profile
{
  namespace system
  {
    // OS name, version
    outcome<void> os(storage_profile &sp, file_handle &h) noexcept
    {
      static std::string os_name, os_ver;
      if (!os_name.empty())
      {
        sp.os_name.value = os_name;
        sp.os_ver.value = os_ver;
      }
      else
      {
        try
        {
          struct utsname name = {0};
          if(uname(&name)<0)
            return make_errored_outcome<void>(errno);
          sp.os_name.value = os_name = name.sysname;
          sp.os_ver.value = os_ver = name.release;
        }
        catch (...)
        {
          return std::current_exception();
        }
      }
      return make_ready_outcome<void>();
    }

    // CPU name, architecture, physical cores
    outcome<void> cpu(storage_profile &sp, file_handle &h) noexcept
    {
      static std::string cpu_name, cpu_architecture;
      static unsigned cpu_physical_cores;
      if (!cpu_name.empty())
      {
        sp.cpu_name.value = cpu_name;
        sp.cpu_architecture.value = cpu_architecture;
        sp.cpu_physical_cores.value = cpu_physical_cores;
      }
      else
      {
        try
        {
          struct utsname name = {0};
          if(uname(&name)<0)
            return make_errored_outcome<void>(errno);
          sp.cpu_name.value = sp.cpu_architecture.value = name.machine;
          sp.cpu_physical_cores.value = 0;
#if defined(__linux__)
          {
            int ih=::open("/proc/cpuinfo", O_RDONLY);
            if(ih>=0)
            {
              char cpuinfo[8192];
              cpuinfo[::read(ih, cpuinfo, sizeof(cpuinfo)-1)]=0;
              ::close(ih);
              /* If siblings > cpu cores hyperthread is enabled:
              siblings   : 8
              cpu cores  : 4
              */
              const char *siblings=strstr(cpuinfo, "siblings");
              const char *cpucores=strstr(cpuinfo, "cpu cores");
              if(siblings && cpucores)
              {
                for(siblings=strchr(siblings, ':'); ' '==*siblings; siblings++);
                for(cpucores=strchr(cpucores, ':'); ' '==*cpucores; cpucores++);
                int s=atoi(siblings), c=atoi(cpucores);
                if(s && c)
                  sp.cpu_physical_cores.value = sysconf( _SC_NPROCESSORS_ONLN ) * c / s;
              }
            }
          }
#else
          // Currently only available on OS X
          {
            int physicalCores=0;
            size_t len=sizeof(physicalCores);
            if(sysctlbyname("hw.physicalcpu", &physicalCores, &len, NULL, 0)>=0)
              sp.cpu_physical_cores.value=physicalCores;
          }
          if(!sp.cpu_physical_cores.value)
          {
            char topology[8192];
            size_t len=sizeof(topology)-1;
            if(sysctlbyname("kern.sched.topology_spec", topology, &len, NULL, 0)>=0)
            {
              topology[len]=0;
              sp.cpu_physical_cores.value = sysconf( _SC_NPROCESSORS_ONLN );
              if(strstr(topology, "HTT"))
                sp.cpu_physical_cores.value /= 2;
            }
          }
#endif
          // Doesn't account for any hyperthreading
          if(!sp.cpu_physical_cores.value)
            sp.cpu_physical_cores.value = sysconf( _SC_NPROCESSORS_ONLN );
#if defined(__i386__) || defined(_M_IX86) || defined(__x86_64__) || defined(_M_X64)
          // We can do a much better CPU name on x86/x64
          sp.cpu_name.value.clear();
          auto __cpuid=[](int *cpuInfo, int func)
          {
            __asm__ __volatile__ ("cpuid\n\t" : "=a" (cpuInfo[0]), "=b" (cpuInfo[1]), "=c" (cpuInfo[2]), "=d" (cpuInfo[3]) : "0" (func));
          };
          {
            char buffer[62];
            memset(buffer, 32, 62);
            int nBuff[4];
            __cpuid(nBuff, 0);
            memcpy(buffer+0, nBuff+1, 4);
            *(int*)(buffer+4) = nBuff[3];
            *(int*)(buffer+8) = nBuff[2];

            // Do we have a brand string?
            __cpuid(nBuff, 0x80000000);
            if ((unsigned)nBuff[0] >= 0x80000004)
            {
              __cpuid((int*)&buffer[14], 0x80000002);
              __cpuid((int*)&buffer[30], 0x80000003);
              __cpuid((int*)&buffer[46], 0x80000004);
            }
            else
              strcpy(&buffer[14], "unbranded");

            // Trim string
            for (size_t n = 0; n < 62; n++)
            {
              if (!n || buffer[n] != 32 || buffer[n - 1] != 32)
                if (buffer[n])
                  sp.cpu_name.value.push_back(buffer[n]);
            }
          }
#endif
          cpu_name = sp.cpu_name.value;
          cpu_architecture = sp.cpu_architecture.value;
          cpu_physical_cores = sp.cpu_physical_cores.value;
        }
        catch (...)
        {
          return std::current_exception();
        }
      }
      return make_ready_outcome<void>();
    }
    namespace posix
    {
      outcome<void> _mem(storage_profile &sp, file_handle &h) noexcept
      {
#if defined(_SC_PHYS_PAGES)
        size_t physpages=sysconf (_SC_PHYS_PAGES), pagesize=sysconf (_SC_PAGESIZE);
        sp.mem_quantity.value = (unsigned long long)physpages * pagesize;
#if defined(_SC_AVPHYS_PAGES)
        size_t freepages=sysconf (_SC_AVPHYS_PAGES);
        sp.mem_in_use.value = (float)(physpages - freepages) / physpages;
#elif defined(HW_USERMEM)
        unsigned long long freemem=0;
        size_t len = sizeof(freemem);
        int mib[2] = { CTL_HW, HW_USERMEM };
        if (sysctl (mib, 2, &freemem, &len, nullptr, 0) >= 0)
        {
          size_t freepages=(size_t)(freemem/pagesize);
          sp.mem_in_use.value = (float)(physpages - freepages) / physpages;          
        }
#else
#error Do not know how to get free physical RAM on this platform
#endif
#endif        
        return make_ready_outcome<void>();
      }
    }
  }
  namespace storage
  {
    namespace posix
    {
      // Controller type, max transfer, max buffers. Device name, size
      outcome<void> _device(storage_profile &sp, file_handle &h, std::string mntfromname, std::string fstypename) noexcept
      {
        try
        {
          // Firstly open a handle to the device
          if(!strncmp(mntfromname.data(), "/dev", 4))
          {
            if(std::isdigit(mntfromname.back()))
              mntfromname.resize(mntfromname.size()-1);
          }
          else
          {
            // If the mount point doesn't begin with /dev we can't use that here, so return ENOSYS
#ifdef __FreeBSD__
            // If on ZFS and there is exactly one physical disk in the system, use that
            if(fstypename=="zfs")
            {
              char buffer[4096];
              size_t len=sizeof(buffer);
              if(sysctlbyname("kern.disks",buffer, &len, NULL, 0)>=0)
              {
                mntfromname.clear();
                // Might be a string like "ada0 cd0 ..."
                const char *s, *e=buffer;
                for(; e<buffer+len; e++)
                {
                  for(s=e; e<buffer+len && *e!=' '; e++);
                  if(s[0]=='c' && s[1]=='d') continue;
                  if(s[0]=='f' && s[1]=='d') continue;
                  if(s[0]=='m' && s[1]=='c' && s[2]=='d') continue;
                  if(s[0]=='s' && s[1]=='c' && s[2]=='d') continue;
                  // Is there more than one physical disk device?
                  if(!mntfromname.empty())
                    return make_errored_outcome<void>(ENOSYS);
                  mntfromname="/dev/"+std::string(s, e-s);
                }
              }
              else
                return make_errored_outcome<void>(ENOSYS);
            }
            else
#endif            
            return make_errored_outcome<void>(ENOSYS);
          }
          BOOST_OUTCOME_FILTER_ERROR(deviceh, file_handle::file(*h.service(), mntfromname, handle::mode::none, handle::creation::open_existing, handle::caching::only_metadata));

          // TODO See https://github.com/baruch/diskscan/blob/master/arch/arch-linux.c
          //          sp.controller_type.value = "SCSI";
          //          sp.controller_max_transfer.value = sad->MaximumTransferLength;
          //          sp.controller_max_buffers.value = sad->MaximumPhysicalPages;
          //          sp.device_name.value.resize(sp.device_name.value.size() - 1);

#ifdef DIOCGMEDIASIZE
          // BSDs
          ioctl(deviceh.native_handle().fd, DIOCGMEDIASIZE, &sp.device_size.value);
#endif
#ifdef BLKGETSIZE64
          // Linux
          ioctl(deviceh.native_handle().fd, BLKGETSIZE64, &sp.device_size.value);
#endif
#ifdef DKIOCGETBLOCKCOUNT
          // OS X
          ioctl(deviceh.native_handle().fd, DKIOCGETBLOCKCOUNT, &sp.device_size.value);
#endif
        }
        catch (...)
        {
          return std::current_exception();
        }
        return make_ready_outcome<void>();
      }
    }
  }
}

BOOST_AFIO_V2_NAMESPACE_END
