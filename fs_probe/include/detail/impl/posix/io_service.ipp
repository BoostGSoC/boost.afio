/* io_service.hpp
Multiplex file i/o
(C) 2015 Niall Douglas http://www.nedprod.com/
File Created: Dec 2015


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "../../../handle.hpp"

#include <pthread.h>
#if BOOST_AFIO_USE_POSIX_AIO
# include <aio.h>
# include <sys/mman.h>
# if BOOST_AFIO_COMPILE_KQUEUES
#  include <sys/types.h>
#  include <sys/event.h>
#  include <sys/time.h>
# endif
#endif

BOOST_AFIO_V2_NAMESPACE_BEGIN

static int interrupt_signal;
static struct sigaction interrupt_signal_handler_old_action;
struct ucontext;
static inline void interrupt_signal_handler(int, siginfo_t *, void *)
{
  // We do nothing, and aio_suspend should exit with EINTR
}

int io_service::interruption_signal() noexcept
{
  return interrupt_signal;
}

int io_service::set_interruption_signal(int signo)
{
  int ret=interrupt_signal;
  if(interrupt_signal)
  {
    if(sigaction(interrupt_signal, &interrupt_signal_handler_old_action, nullptr)<0)
      throw std::system_error(errno, std::system_category());
    interrupt_signal=0;
  }
  if(signo)
  {
#if BOOST_AFIO_HAVE_REALTIME_SIGNALS
    if(-1==signo)
    {
      for(signo=SIGRTMIN; signo<SIGRTMAX; signo++)
      {
        struct sigaction sigact = { 0 };
        if(sigaction(signo, nullptr, &sigact)>=0)
        {
          if(sigact.sa_handler==SIG_DFL)
            break;
        }
      }
    }
#endif
    // Install process wide signal handler for signal
    struct sigaction sigact = { 0 };
    sigact.sa_sigaction=&interrupt_signal_handler;
    sigact.sa_flags=SA_SIGINFO;
    sigemptyset(&sigact.sa_mask);
    if(sigaction(signo, &sigact, &interrupt_signal_handler_old_action)<0)
      throw std::system_error(errno, std::system_category());
    interrupt_signal=signo;
  }
  return ret;
}

void io_service::_block_interruption() noexcept
{
  if(_use_kqueues)
    return;
  assert(!_blocked_interrupt_signal);
  sigset_t set;
  sigemptyset(&set);
  sigaddset(&set, interrupt_signal);
  pthread_sigmask(SIG_BLOCK, &set, nullptr);
  _blocked_interrupt_signal=interrupt_signal;
  _need_signal=false;
}

void io_service::_unblock_interruption() noexcept
{
  if(_use_kqueues)
    return;
  assert(_blocked_interrupt_signal);
  if(_blocked_interrupt_signal)
  {
    sigset_t set;
    sigemptyset(&set);
    sigaddset(&set, _blocked_interrupt_signal);
    pthread_sigmask(SIG_UNBLOCK, &set, nullptr);
    _blocked_interrupt_signal=0;
    _need_signal=true;
  }
}

io_service::io_service() : _work_queued(0)
{
  _threadh = pthread_self();
#if BOOST_AFIO_USE_POSIX_AIO
  _use_kqueues=true;
  _blocked_interrupt_signal=0;
# if BOOST_AFIO_COMPILE_KQUEUES
  _kqueueh=0;
#  error todo
# else
  disable_kqueues();
# endif
#else
# error todo
#endif
}

io_service::~io_service()
{
  if (_work_queued)
  {
    std::cerr << "WARNING: ~io_service() sees work still queued, blocking until no work queued" << std::endl;
    while (_work_queued)
      std::this_thread::yield();
  }
#if BOOST_AFIO_USE_POSIX_AIO
# if BOOST_AFIO_COMPILE_KQUEUES
  if(_kqueueh)
    ::close(_kqueueh);
# endif
  _aiocbsv.clear();
  if (pthread_self() == _threadh)
    _unblock_interruption();
#else
# error todo
#endif
}

#if BOOST_AFIO_USE_POSIX_AIO
void io_service::disable_kqueues()
{
  if(_use_kqueues)
  {
    if(_work_queued)
      throw std::runtime_error("Cannot disable kqueues if work is pending");
    if (pthread_self() != _threadh)
      throw std::runtime_error("Cannot disable kqueues except from owning thread");
    // Is the global signal handler set yet?
    if(!interrupt_signal)
      set_interruption_signal();
    _use_kqueues=false;
    // Block interruption on this thread
    _block_interruption();
    // Prepare for aio_suspend
#ifdef AIO_LISTIO_MAX
    _aiocbsv.reserve(AIO_LISTIO_MAX);
#else
    _aiocbsv.reserve(16);
#endif
  }
}
#endif

result<bool> io_service::run_until(deadline d) noexcept
{
  if (!_work_queued)
    return false;
  if (pthread_self() != _threadh)
    return make_errored_result<bool>(EOPNOTSUPP);
  stl11::chrono::steady_clock::time_point began_steady;
  stl11::chrono::system_clock::time_point end_utc;
  if (d)
  {
    if (d.steady)
      began_steady = stl11::chrono::steady_clock::now();
    else
      end_utc = d.to_time_point();
  }
  struct timespec *ts=nullptr, _ts={0};
  bool done=false;
  do
  {
    if (d)
    {
      stl11::chrono::nanoseconds ns;
      if (d.steady)
        ns = stl11::chrono::duration_cast<stl11::chrono::nanoseconds>((began_steady + stl11::chrono::nanoseconds(d.nsecs)) - stl11::chrono::steady_clock::now());
      else
        ns = stl11::chrono::duration_cast<stl11::chrono::nanoseconds>(end_utc - stl11::chrono::system_clock::now());
      ts=&_ts;      
      if (ns.count() <= 0)
      {
        ts->tv_sec=0;
        ts->tv_nsec=0;
      }
      else
      {
        ts->tv_sec=ns.count()/1000000000ULL;
        ts->tv_nsec=ns.count()%1000000000ULL;
      }
    }
    bool timedout=false;
    // Unblock the interruption signal
    _unblock_interruption();
    // Execute any pending posts
    {
      std::unique_lock<decltype(_posts_lock)> g(_posts_lock);
      if(!_posts.empty())
      {
        post_info *pi=&_posts.front();
        g.unlock();
        pi->f(this);
        _post_done(pi);
        // We did work, so exit
        // Block the interruption signal
        _block_interruption();
        return _work_queued != 0;
      }
    }
#if BOOST_AFIO_USE_POSIX_AIO
    int errcode=0;
    if(_use_kqueues)
    {
#if BOOST_AFIO_COMPILE_KQUEUES
# error todo
#endif
    }
    else
    {
      if(aio_suspend(_aiocbsv.data(), _aiocbsv.size(), ts)<0)
        errcode=errno;
    }
    // Block the interruption signal
    _block_interruption();
    if(errcode)
    {
      switch(errcode)
      {
        case EAGAIN:
          if(d)
            timedout=true;
          break;
        case EINTR:
          // Let him loop, recalculate any timeout and check for posts to be executed
          break;
        default:
          return make_errored_result<bool>(errcode);
      }
    }
    else
    {
      // Poll the outstanding aiocbs to see which are ready
      for(auto &aiocb : _aiocbsv)
      {
        int ioret=aio_return(aiocb);
        if(ioret>=0 || errno!=EINVAL)
        {
          int errcode=ioret<0 ? errno : 0;
//          std::cout << "aiocb " << aiocb << " sees return " << ioret << " errno " << errcode << std::endl;
          // The aiocb aio_sigevent.sigev_value.sival_ptr field will point to a file_handle::_io_state_type
          auto io_state=(file_handle::_erased_io_state_type *) aiocb->aio_sigevent.sigev_value.sival_ptr;
          assert(io_state);
          (*io_state)(errcode, ioret, &aiocb);
        }
      }
      // Eliminate any empty holes in the quick aiocbs vector
      _aiocbsv.erase(std::remove(_aiocbsv.begin(), _aiocbsv.end(), nullptr), _aiocbsv.end());
      done=true;
    }
#else
# error todo
#endif
    if(timedout)
    {
      if (d.steady)
      {
        if(stl11::chrono::steady_clock::now()>=(began_steady + stl11::chrono::nanoseconds(d.nsecs)))
          return make_errored_result<bool>(ETIMEDOUT);
      }
      else
      {
        if(stl11::chrono::system_clock::now()>=end_utc)
          return make_errored_result<bool>(ETIMEDOUT);
      }
    }
  } while(!done);
  return _work_queued != 0;
}

void io_service::post(detail::function_ptr<void(io_service *)> &&f)
{
  {
    post_info pi(this, std::move(f));
    std::lock_guard<decltype(_posts_lock)> g(_posts_lock);
    _posts.push_back(std::move(pi));
  }
  _work_enqueued();
#if BOOST_AFIO_USE_POSIX_AIO
  if(_use_kqueues)
  {
#if BOOST_AFIO_COMPILE_KQUEUES
# error todo
#endif
  }
  else
  {
    // If run_until() is exactly between the unblock of the signal and the beginning
    // of the aio_suspend(), we need to pump this until run_until() notices
    while(_need_signal)
    {
//#  if BOOST_AFIO_HAVE_REALTIME_SIGNALS
//    sigval val = { 0 };
//    pthread_sigqueue(_threadh, interrupt_signal, val);
//#else
      pthread_kill(_threadh, interrupt_signal);
//#  endif
    }
  }
#else
# error todo
#endif
}

BOOST_AFIO_V2_NAMESPACE_END
