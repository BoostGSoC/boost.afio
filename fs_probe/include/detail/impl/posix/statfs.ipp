/* statfs.hpp
Information about the volume storing a file
(C) 2016 Niall Douglas http://www.nedprod.com/
File Created: Jan 2016


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "../../../statfs.hpp"
#include "../../../handle.hpp"

#include <sys/mount.h>
#ifdef __linux__
# include <sys/statfs.h>
# include <mntent.h>
#endif

BOOST_AFIO_V2_NAMESPACE_BEGIN

BOOST_AFIO_HEADERS_ONLY_MEMFUNC_SPEC result<size_t> statfs_t::fill(handle &h, statfs_t::want wanted) noexcept
{
  size_t ret = 0;
#ifdef __linux__
  struct statfs64 s={0};
  if(-1==fstatfs64(h.native_handle().fd, &s))
    return make_errored_result<size_t>(errno);
  if(!!(wanted&&want::bsize))       { f_bsize      =s.f_bsize;   ++ret; }
  if(!!(wanted&&want::iosize))      { f_iosize     =s.f_frsize;  ++ret; }
  if(!!(wanted&&want::blocks))      { f_blocks     =s.f_blocks;  ++ret; }
  if(!!(wanted&&want::bfree))       { f_bfree      =s.f_bfree;   ++ret; }
  if(!!(wanted&&want::bavail))      { f_bavail     =s.f_bavail;  ++ret; }
  if(!!(wanted&&want::files))       { f_files      =s.f_files;   ++ret; }
  if(!!(wanted&&want::ffree))       { f_ffree      =s.f_ffree;   ++ret; }
  if(!!(wanted&&want::namemax))     { f_namemax    =s.f_namelen; ++ret; }
//            if(!!(wanted&&want::owner))       { f_owner      =s.f_owner;  ++ret; }
  if(!!(wanted&&want::fsid))        { f_fsid[0]=(unsigned) s.f_fsid.__val[0]; f_fsid[1]=(unsigned) s.f_fsid.__val[1]; ++ret; }
  if(!!(wanted&&want::flags) || !!(wanted&&want::fstypename) || !!(wanted&&want::mntfromname) || !!(wanted&&want::mntonname))
  {
    struct mountentry
    {
      std::string mnt_fsname, mnt_dir, mnt_type, mnt_opts;
      mountentry(const char *a, const char *b, const char *c, const char *d) : mnt_fsname(a), mnt_dir(b), mnt_type(c), mnt_opts(d) { }
    };
    std::vector<std::pair<mountentry, struct statfs64>> mountentries;
    {
      // Need to parse mount options on Linux
      FILE *mtab=setmntent("/etc/mtab", "r");
      if(!mtab)
        return make_errored_result<size_t>(errno);
      auto unmtab=detail::Undoer([mtab]{endmntent(mtab);});
      struct mntent m;
      char buffer[32768];
      while(getmntent_r(mtab, &m, buffer, sizeof(buffer)))
      {
        struct statfs64 temp={0};
        if(0==statfs64(m.mnt_dir, &temp) && temp.f_type==s.f_type && !memcmp(&temp.f_fsid, &s.f_fsid, sizeof(s.f_fsid)))
          mountentries.push_back(std::make_pair(mountentry(m.mnt_fsname, m.mnt_dir, m.mnt_type, m.mnt_opts), temp));
      }
    }
#ifndef BOOST_AFIO_COMPILING_FOR_GCOV
    if(mountentries.empty())
      return make_errored_result<size_t>(ENOENT);
    // Choose the mount entry with the most closely matching statfs. You can't choose
    // exclusively based on mount point because of bind mounts
    if(mountentries.size()>1)
    {
      std::vector<std::pair<size_t, size_t>> scores(mountentries.size());
      for(size_t n=0; n<mountentries.size(); n++)
      {
        const char *a=(const char *) &mountentries[n].second;
        const char *b=(const char *) &s;
        scores[n].first=0;
        for(size_t x=0; x<sizeof(struct statfs64); x++)
          scores[n].first+=abs(a[x]-b[x]);
        scores[n].second=n;
      }
      std::sort(scores.begin(), scores.end());
      auto temp(std::move(mountentries[scores.front().second]));
      mountentries.clear();
      mountentries.push_back(std::move(temp));
    }
#endif
    if(!!(wanted&&want::flags))
    {
      f_flags.rdonly     =!!(s.f_flags & MS_RDONLY);
      f_flags.noexec     =!!(s.f_flags & MS_NOEXEC);
      f_flags.nosuid     =!!(s.f_flags & MS_NOSUID);
      f_flags.acls       =(std::string::npos!=mountentries.front().first.mnt_opts.find("acl") && std::string::npos==mountentries.front().first.mnt_opts.find("noacl"));
      f_flags.xattr      =(std::string::npos!=mountentries.front().first.mnt_opts.find("xattr") && std::string::npos==mountentries.front().first.mnt_opts.find("nouser_xattr"));
//                out.f_flags.compression=0;
      // Those filing systems supporting FALLOC_FL_PUNCH_HOLE
      f_flags.extents    =(mountentries.front().first.mnt_type=="btrfs"
                          || mountentries.front().first.mnt_type=="ext4"
                          || mountentries.front().first.mnt_type=="xfs"
                          || mountentries.front().first.mnt_type=="tmpfs");
      ++ret;
    }
    if(!!(wanted&&want::fstypename))  { f_fstypename =mountentries.front().first.mnt_type;   ++ret; }
    if(!!(wanted&&want::mntfromname)) { f_mntfromname=mountentries.front().first.mnt_fsname; ++ret; }
    if(!!(wanted&&want::mntonname))   { f_mntonname  =mountentries.front().first.mnt_dir;    ++ret; }
  }
#else
  struct statfs s;
  if(-1==fstatfs(h.native_handle().fd, &s))
    return make_errored_result<size_t>(errno);
  if(!!(wanted&&want::flags))
  {
    f_flags.rdonly     =!!(s.f_flags & MNT_RDONLY);
    f_flags.noexec     =!!(s.f_flags & MNT_NOEXEC);
    f_flags.nosuid     =!!(s.f_flags & MNT_NOSUID);
    f_flags.acls       =0;
#if defined(MNT_ACLS) && defined(MNT_NFS4ACLS)
    f_flags.acls       =!!(s.f_flags & (MNT_ACLS|MNT_NFS4ACLS));
#endif
    f_flags.xattr      =1; // UFS and ZFS support xattr. TODO FIXME actually calculate this, zfs get xattr <f_mntfromname> would do it.
    f_flags.compression=!strcmp(s.f_fstypename, "zfs");
    f_flags.extents    =!strcmp(s.f_fstypename, "ufs") || !strcmp(s.f_fstypename, "zfs");
    ++ret;
  }
  if(!!(wanted&&want::bsize))       { f_bsize      =s.f_bsize;   ++ret; }
  if(!!(wanted&&want::iosize))      { f_iosize     =s.f_iosize;  ++ret; }
  if(!!(wanted&&want::blocks))      { f_blocks     =s.f_blocks;  ++ret; }
  if(!!(wanted&&want::bfree))       { f_bfree      =s.f_bfree;   ++ret; }
  if(!!(wanted&&want::bavail))      { f_bavail     =s.f_bavail;  ++ret; }
  if(!!(wanted&&want::files))       { f_files      =s.f_files;   ++ret; }
  if(!!(wanted&&want::ffree))       { f_ffree      =s.f_ffree;   ++ret; }
#ifdef __APPLE__
  if(!!(wanted&&want::namemax))     { f_namemax    =255;         ++ret; }
#else
  if(!!(wanted&&want::namemax))     { f_namemax    =s.f_namemax; ++ret; }
#endif
  if(!!(wanted&&want::owner))       { f_owner      =s.f_owner;   ++ret; }
  if(!!(wanted&&want::fsid))        { f_fsid[0]=(unsigned) s.f_fsid.val[0]; f_fsid[1]=(unsigned) s.f_fsid.val[1]; ++ret; }
  if(!!(wanted&&want::fstypename))  { f_fstypename =s.f_fstypename;  ++ret; }
  if(!!(wanted&&want::mntfromname)) { f_mntfromname=s.f_mntfromname; ++ret; }
  if(!!(wanted&&want::mntonname))   { f_mntonname  =s.f_mntonname;   ++ret; }
#endif
  return ret;
}

BOOST_AFIO_V2_NAMESPACE_END
