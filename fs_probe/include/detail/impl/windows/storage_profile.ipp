/* storage_profile.hpp
A profile of an OS and filing system
(C) 2015 Niall Douglas http://www.nedprod.com/
File Created: Dec 2015


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "../../../storage_profile.hpp"
#include "../../../statfs.hpp"
#include "../../../utils.hpp"

BOOST_AFIO_V2_NAMESPACE_BEGIN

namespace storage_profile
{
  namespace system
  {
    // OS name, version
#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable: 6387) // MSVC sanitiser warns that GetModuleHandleA() might fail (hah!)
#endif
    outcome<void> os(storage_profile &sp, handle &h) noexcept
    {
      try
      {
        RTL_OSVERSIONINFOW ovi = { sizeof(RTL_OSVERSIONINFOW) };
        // GetVersionEx() is no longer useful since Win8.1
        using RtlGetVersion_t = LONG(*)(PRTL_OSVERSIONINFOW);
        static RtlGetVersion_t RtlGetVersion;
        if (!RtlGetVersion)
          RtlGetVersion = (RtlGetVersion_t)GetProcAddress(GetModuleHandle(L"NTDLL.DLL"), "RtlGetVersion");
        if (!RtlGetVersion)
          return make_errored_outcome<void>(GetLastError());
        RtlGetVersion(&ovi);
        sp.os_name.value = "Microsoft Windows ";
        sp.os_name.value.append(ovi.dwPlatformId == VER_PLATFORM_WIN32_NT ? "NT" : "Unknown");
        sp.os_ver.value.append(to_string(ovi.dwMajorVersion) + "." + to_string(ovi.dwMinorVersion) + "." + to_string(ovi.dwBuildNumber));
      }
      catch (...)
      {
        return std::current_exception();
      }
      return make_outcome<void>();
    }
#ifdef _MSC_VER
#pragma warning(pop)
#endif
    // CPU name, architecture, physical cores
    outcome<void> cpu(storage_profile &sp, handle &h) noexcept
    {
      try
      {
        SYSTEM_INFO si = { {sizeof(SYSTEM_INFO)} };
        GetNativeSystemInfo(&si);
        switch (si.wProcessorArchitecture)
        {
        case PROCESSOR_ARCHITECTURE_AMD64:
          sp.cpu_name.value = sp.cpu_architecture.value = "x64";
          break;
        case PROCESSOR_ARCHITECTURE_ARM:
          sp.cpu_name.value = sp.cpu_architecture.value = "ARM";
          break;
        case PROCESSOR_ARCHITECTURE_IA64:
          sp.cpu_name.value = sp.cpu_architecture.value = "IA64";
          break;
        case PROCESSOR_ARCHITECTURE_INTEL:
          sp.cpu_name.value = sp.cpu_architecture.value = "x86";
          break;
        default:
          sp.cpu_name.value = sp.cpu_architecture.value = "unknown";
          break;
        }
        {
          DWORD size = 0;

          GetLogicalProcessorInformation(NULL, &size);
          if (ERROR_INSUFFICIENT_BUFFER != GetLastError())
            return make_errored_outcome<void>(GetLastError());

          std::vector<SYSTEM_LOGICAL_PROCESSOR_INFORMATION> buffer(size);
          if (GetLogicalProcessorInformation(&buffer.front(), &size) == FALSE)
            return make_errored_outcome<void>(GetLastError());

          const size_t Elements = size / sizeof(SYSTEM_LOGICAL_PROCESSOR_INFORMATION);

          sp.cpu_physical_cores.value = 0;
          for (size_t i = 0; i < Elements; ++i) {
            if (buffer[i].Relationship == RelationProcessorCore)
              ++sp.cpu_physical_cores.value;
          }
        }
#if defined(__i386__) || defined(_M_IX86) || defined(__x86_64__) || defined(_M_X64)
        // We can do a much better CPU name on x86/x64
        sp.cpu_name.value.clear();
        {
          char buffer[62];
          memset(buffer, 32, 62);
          int nBuff[4];
          __cpuid(nBuff, 0);
          *(int*)&buffer[0] = nBuff[1];
          *(int*)&buffer[4] = nBuff[3];
          *(int*)&buffer[8] = nBuff[2];

          // Do we have a brand string?
          __cpuid(nBuff, 0x80000000);
          if ((unsigned)nBuff[0] >= 0x80000004)
          {
            __cpuid((int*)&buffer[14], 0x80000002);
            __cpuid((int*)&buffer[30], 0x80000003);
            __cpuid((int*)&buffer[46], 0x80000004);
          }
          else
            strcpy(&buffer[14], "unbranded");

          // Trim string
          for (size_t n = 0; n < 62; n++)
          {
            if (!n || buffer[n] != 32 || buffer[n - 1] != 32)
              sp.cpu_name.value.push_back(buffer[n]);
          }
        }
#endif
      }
      catch (...)
      {
        return std::current_exception();
      }
      return make_outcome<void>();
    }
    // System memory quantity, in use, max and min bandwidth
    outcome<void> mem(storage_profile &sp, handle &h) noexcept
    {
      try
      {
        size_t chunksize = 256 * 1024 * 1024;
        MEMORYSTATUSEX ms = { sizeof(MEMORYSTATUSEX) };
        GlobalMemoryStatusEx(&ms);
        sp.mem_quantity.value = (unsigned)ms.ullTotalPhys;
        sp.mem_in_use.value = (float)(ms.ullTotalPhys - ms.ullAvailPhys) / ms.ullTotalPhys;

        if (ms.ullTotalPhys / 4 < chunksize)
          chunksize = ms.ullTotalPhys / 4;
        std::vector<char, utils::page_allocator<char>> buffer(chunksize);
        // Make sure all memory is really allocated first
        memset(buffer.data(), 1, chunksize);

        // Max bandwidth is sequential writes of min(25% of system memory or 256Mb)
        auto begin = stl11::chrono::high_resolution_clock::now();
        unsigned long long count;
        for (count = 0; stl11::chrono::duration_cast<stl11::chrono::seconds>(stl11::chrono::high_resolution_clock::now() - begin).count() < 10; count++)
        {
          memset(buffer.data(), count & 0xff, chunksize);
        }
        sp.mem_max_bandwidth.value = (unsigned)(count*chunksize / 10);

        // Min bandwidth is randomised 4Kb copies of the same
        detail::ranctx ctx;
        detail::raninit(&ctx, 78);
        begin = stl11::chrono::high_resolution_clock::now();
        for (count = 0; stl11::chrono::duration_cast<stl11::chrono::seconds>(stl11::chrono::high_resolution_clock::now() - begin).count() < 10; count++)
        {
          for (size_t n = 0; n < chunksize; n += 4096)
          {
            auto offset = detail::ranval(&ctx) * 4096;
            offset = offset % chunksize;
            memset(buffer.data() + offset, count & 0xff, 4096);
          }
        }
        sp.mem_min_bandwidth.value = (unsigned)(count*chunksize / 10);
      }
      catch (...)
      {
        return std::current_exception();
      }
      return make_outcome<void>();
    }
  }
  namespace storage
  {
    // Device name, size, min i/o size
    outcome<void> device(storage_profile &sp, handle &h) noexcept
    {
      try
      {
      }
      catch (...)
      {
        return std::current_exception();
      }
      return make_outcome<void>();
    }
    // FS name, config, size, in use
    outcome<void> fs(storage_profile &sp, handle &h) noexcept
    {
      try
      {
      }
      catch (...)
      {
        return std::current_exception();
      }
      return make_outcome<void>();
    }
  }
}

BOOST_AFIO_V2_NAMESPACE_END
