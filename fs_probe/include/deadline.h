/* deadline.hpp
Specifies a time deadline
(C) 2015 Niall Douglas http://www.nedprod.com/
File Created: Dec 2015


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOST_AFIO_DEADLINE_H
#define BOOST_AFIO_DEADLINE_H

#include <stdbool.h>
#include <time.h>

#ifdef __cplusplus
#include "config.hpp"
#include <stdexcept>
BOOST_AFIO_V2_NAMESPACE_BEGIN
#define BOOST_AFIO_DEADLINE_NAME deadline
#else
#define BOOST_AFIO_DEADLINE_NAME boost_afio_deadline
#endif

/*! \struct deadline
\brief A time deadline in either relative-to-now or absolute (system clock) terms
*/
struct BOOST_AFIO_DEADLINE_NAME
{
  bool steady;  //!< True if deadline does not change with system clock changes
  union {
    struct timespec utc;       //!< System time from timespec_get(&ts, TIME_UTC)
    unsigned long long nsecs;  //!< Nanosecond ticks from start of operation
  };
#ifdef __cplusplus
  deadline() noexcept { memset(this, 0, sizeof(*this)); }
  //! True if deadline is valid
  explicit operator bool() const noexcept { return steady || utc.tv_sec != 0; }
  //! Construct a deadline from a system clock time point
  deadline(stl11::chrono::system_clock::time_point tp)
      : steady(false)
  {
    stl11::chrono::seconds secs(stl11::chrono::system_clock::to_time_t(tp));
    utc.tv_sec = secs.count();
    stl11::chrono::system_clock::time_point _tp(stl11::chrono::system_clock::from_time_t(utc.tv_sec));
    utc.tv_nsec = (long) stl11::chrono::duration_cast<stl11::chrono::nanoseconds>(tp - _tp).count();
  }
  //! Construct a deadline from a duration from now
  template <class Rep, class Period>
  deadline(stl11::chrono::duration<Rep, Period> d)
      : steady(true)
  {
    stl11::chrono::nanoseconds _nsecs = stl11::chrono::duration_cast<stl11::chrono::nanoseconds>(d);
    // Negative durations are zero duration
    if(_nsecs.count() > 0)
      nsecs = _nsecs.count();
    else
      nsecs = 0;
  }
  //! Returns a system_clock::time_point for this deadline
  stl11::chrono::system_clock::time_point to_time_point() const
  {
    if(steady)
      throw std::invalid_argument("Not a UTC deadline!");
    stl11::chrono::system_clock::time_point tp(stl11::chrono::system_clock::from_time_t(utc.tv_sec));
    tp += stl11::chrono::duration_cast<stl11::chrono::system_clock::duration>(stl11::chrono::nanoseconds(utc.tv_nsec));
    return tp;
  }
#endif
};

#undef BOOST_AFIO_DEADLINE_NAME
#ifdef __cplusplus
BOOST_AFIO_V2_NAMESPACE_END
#endif

#endif
