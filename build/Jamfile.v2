#  Boost AFIO Library Jamfile
#
#  Copyright (c) Paul Kirth 2013.
#
#  Distributed under the Boost Software License, Version 1.0.
#  (See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt)

import modules ;
import ../../config/checks/config : requires ;
.argv = [ modules.peek : ARGV ] ;

project boost/afio
    : requirements
      [ requires cxx11_variadic_templates cxx11_template_aliases cxx11_noexcept cxx11_constexpr ]
      <threading>multi
      <link>shared:<define>BOOST_AFIO_DYN_LINK=1  
      <link>shared:<define>BOOST_AFIO_SOURCE=1
      <link>static:<define>BOOST_AFIO_SOURCE=1
      <include>../../../boost/afio 
      <toolset>gcc:<cxxflags>"-fvisibility-inlines-hidden -fstrict-aliasing -Wstrict-aliasing -Wno-unused -fargument-noalias -fvisibility=hidden -fasynchronous-unwind-tables"
      <toolset>gcc-mingw:<cxxflags>"-DWIN32 -D_UNICODE -DUNICODE -Wno-missing-braces"
      <toolset>gcc-mingw:<linkflags>"-lws2_32"
      <toolset>clang:<cxxflags>"-fvisibility-inlines-hidden -fstrict-aliasing -Wstrict-aliasing -Wno-unused -Wno-mismatched-tags -Wno-unknown-pragmas -fvisibility=hidden -fasynchronous-unwind-tables"
      <toolset>msvc:<cxxflags>"/GF /Gy"
      <toolset>msvc:<linkflags>"/LARGEADDRESSAWARE /DYNAMICBASE /NXCOMPAT" # /VERSION:1.00.0"
      <toolset>msvc:<define>WIN32 
      <toolset>msvc:<define>_WINDOWS  
      <toolset>msvc:<define>UNICODE 
      <toolset>msvc:<define>_UNICODE
      <target-os>linux:<linkflags>"-lpthread -ldl"
      <target-os>freebsd:<linkflags>"-lpthread -lexecinfo"
      <link>shared:<define>BOOST_AFIO_DYN_LINK=1
      <link>shared:<library>../../system/build//boost_system
      <link>shared:<library>../../filesystem/build//boost_filesystem
      <link>shared:<library>../../atomic/build//boost_atomic
      <link>shared:<library>../../thread/build//boost_thread
      
    : usage-requirements 
      <include>. 

    : source-location ../src
;

lib boost_afio 
    : afio.cpp 
;

# Have AFIO bundle in an exported copy of ASIO. Saves compiling
# ASIO later which in turn speeds up compiling AFIO users.
lib boost_afio_dyn_asio 
    : afio.cpp 
    : <define>BOOST_ASIO_SEPARATE_COMPILATION
      <define>BOOST_ASIO_DYN_LINK
      <define>BOOST_AFIO_ENABLE_BENCHMARKING_COMPLETION
      <toolset>gcc:<cxxflags>"-fvisibility=default"  # Work around bug in ASIO where he isn't exporting all his symbols correctly
;
explicit boost_afio_dyn_asio ;

boost-install boost_afio ;


